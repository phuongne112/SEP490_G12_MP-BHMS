import React, { useEffect, useState, useCallback } from "react";
import { Card, Descriptions, Tag, Spin, Typography, Button, message, Row, Col, Modal, List, DatePicker, Alert, Badge, Statistic, Timeline, Divider, Pagination } from "antd";
import { FileTextOutlined, HistoryOutlined, ReloadOutlined, BellOutlined, InfoCircleOutlined, ClockCircleOutlined } from "@ant-design/icons";
import RenterSidebar from "../../components/layout/RenterSidebar";
import dayjs from "dayjs";
import { getRenterContracts, exportContractPdf } from "../../services/contractApi";
import { getPersonalInfo } from "../../services/userApi";
import { getContractAmendments, approveAmendment, rejectAmendment, renewContract, getContractAmendmentsByStatus } from "../../services/roomUserApi";
import { useSelector } from "react-redux";

const { Title, Text } = Typography;
const { Countdown } = Statistic;

export default function RenterContractPage() {
  const [contract, setContract] = useState(null);
  const [contractHistory, setContractHistory] = useState([]);
  const [renterInfo, setRenterInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [amendmentsModalOpen, setAmendmentsModalOpen] = useState(false);
  const [historyModalOpen, setHistoryModalOpen] = useState(false);
  const [amendments, setAmendments] = useState([]);
  const [amendmentLoading, setAmendmentLoading] = useState(false);
  const [approvingId, setApprovingId] = useState(null);
  const [rejectingId, setRejectingId] = useState(null);
  const [rejectModalOpen, setRejectModalOpen] = useState(false);
  const [rejectReason, setRejectReason] = useState("");
  const [rejectLoading, setRejectLoading] = useState(false);
  const [renewModalOpen, setRenewModalOpen] = useState(false);
  const [renewReason, setRenewReason] = useState("");
  const [renewEndDate, setRenewEndDate] = useState(null);
  const [renewingContract, setRenewingContract] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [hasNewChanges, setHasNewChanges] = useState(false);
  const [previousContractId, setPreviousContractId] = useState(null);
  const [amendmentsPage, setAmendmentsPage] = useState(1);
  const amendmentsPageSize = 3;
  const user = useSelector((state) => state.account.user);

  const fetchData = useCallback(async (showRefreshIndicator = false) => {
    if (showRefreshIndicator) {
      setRefreshing(true);
    } else {
      setLoading(true);
    }
    
    try {
      // Get current renter's contracts
      const contractRes = await getRenterContracts();
      const contracts = contractRes.data || contractRes;
      
      let currentContract = null;
      if (contracts && contracts.length > 0) {
        // Prioritize ACTIVE contract, if not available then get the contract with the latest end date
        const active = contracts.find(c => c.contractStatus === "ACTIVE");
        if (active) {
          currentContract = active;
        } else {
          const sorted = [...contracts].sort((a, b) => new Date(b.contractEndDate) - new Date(a.contractEndDate));
          currentContract = sorted[0];
        }
        
        // Check for contract changes
        if (previousContractId && currentContract && currentContract.id !== previousContractId) {
          setHasNewChanges(true);
          message.success({
            content: `üîÑ Ph√°t hi·ªán h·ª£p ƒë·ªìng m·ªõi! ID: ${currentContract.id}`,
            duration: 5,
            key: 'new-contract'
          });
        }
        
        setPreviousContractId(currentContract?.id);
        setContractHistory(contracts.sort((a, b) => new Date(b.updatedDate || b.createdDate) - new Date(a.updatedDate || a.createdDate)));
      }
      
      setContract(currentContract);
      
      // Get current renter's information
      const renter = await getPersonalInfo();
      setRenterInfo(renter);
      setLastUpdated(new Date());
    } catch (err) {
      if (!showRefreshIndicator) {
        message.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ª£p ƒë·ªìng ho·∫∑c th√¥ng tin ng∆∞·ªùi thu√™");
      }
      setContract(null);
      setRenterInfo(null);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  }, [previousContractId]);

  useEffect(() => {
    fetchData();
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [fetchData]);

  // Auto-refresh every 30 seconds
  useEffect(() => {
    let interval = null;
    if (autoRefresh && contract) {
      interval = setInterval(() => {
        fetchData(true);
      }, 30000);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [autoRefresh, contract, fetchData]);

  const manualRefresh = () => {
    fetchData(true);
    setHasNewChanges(false);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "ACTIVE": return "green";
      case "EXPIRED": return "red";
      case "PENDING": return "orange";
      default: return "default";
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case "ACTIVE": return "ƒêang hi·ªáu l·ª±c";
      case "EXPIRED": return "H·∫øt h·∫°n";
      case "PENDING": return "Ch·ªù ph√™ duy·ªát";
      default: return status;
    }
  };

  const getAmendmentTypeText = (type) => {
    switch (type) {
      case 'RENT_INCREASE': return 'TƒÉng ti·ªÅn thu√™';
      case 'DEPOSIT_CHANGE': return 'Thay ƒë·ªïi ti·ªÅn c·ªçc';
      case 'TERMS_UPDATE': return 'C·∫≠p nh·∫≠t ƒëi·ªÅu kho·∫£n';
      case 'DURATION_EXTENSION': return 'Gia h·∫°n h·ª£p ƒë·ªìng';
      case 'RENTER_CHANGE': return 'Thay ƒë·ªïi ng∆∞·ªùi thu√™';
      case 'TERMINATION': return 'Ch·∫•m d·ª©t h·ª£p ƒë·ªìng';
      case 'OTHER': return 'Kh√°c';
      default: return type;
    }
  };

  const getAmendmentStatusText = (status) => {
    switch (status) {
      case 'REJECTED': return 'ƒê√£ t·ª´ ch·ªëi';
      case 'PENDING': return 'Ch·ªù duy·ªát';
      case 'APPROVED': return 'ƒê√£ duy·ªát';
      default: return status;
    }
  };

  const formatAmendmentValue = (value) => {
    if (!value) return value;
    
    // Format s·ªë ti·ªÅn
    const formatMoney = (text) => {
      // T√¨m v√† format c√°c s·ªë ti·ªÅn trong text
      return text.replace(/(\d+(?:\.\d+)?(?:E\d+)?)\s*(?:VND|‚Ç´)/gi, (match, number) => {
        const num = parseFloat(number);
        if (!isNaN(num)) {
          return num.toLocaleString('vi-VN') + ' VND';
        }
        return match;
      });
    };
    
    return formatMoney(value);
  };

  const handleViewAmendments = async () => {
    if (!contract?.id) return;
    setAmendments([]);
    setAmendmentsModalOpen(true);
    setAmendmentsPage(1); // Reset page when opening amendments modal
    setAmendmentLoading(true);
    try {
      const res = await getContractAmendments(contract.id);
      setAmendments(res.data || res);
    } catch (e) {
      console.error('Failed to load amendments:', e);
      setAmendments([]);
    } finally {
    setAmendmentLoading(false);
    }
  };

  const handleApproveAmendment = async (amendmentId) => {
    if (approvingId === amendmentId) return; // Prevent double clicks
    
    setApprovingId(amendmentId);
    
    try {
      await approveAmendment(amendmentId, false); // false = tenant/renter approval
      message.success({
        content: "ƒê√£ ph√™ duy·ªát th√†nh c√¥ng!",
        key: `approve-${amendmentId}`,
        duration: 3
      });
      // Refresh amendments data instead of optimistic update
      setTimeout(async () => {
        const res = await getContractAmendments(contract.id);
        setAmendments(res.data || res);
      }, 300);
    } catch {
      message.error({
        content: "Ph√™ duy·ªát th·∫•t b·∫°i!",
        key: `approve-error-${amendmentId}`,
        duration: 4
      });
    } finally {
      setApprovingId(null);
    }
  };

  const handleRejectAmendment = (amendmentId) => {
    if (rejectingId) return; // Prevent multiple modals
    setRejectingId(amendmentId);
    setRejectReason("");
    setRejectModalOpen(true);
  };

  const doRejectAmendment = async () => {
    if (!rejectReason) {
      message.error({
        content: "Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi!",
        key: 'reject-validation'
      });
      return;
    }
    
    if (rejectLoading) return; // Prevent multiple submissions
    
    setRejectLoading(true);
    
    try {
      await rejectAmendment(rejectingId, rejectReason);
      message.success({
        content: "ƒê√£ t·ª´ ch·ªëi th√†nh c√¥ng!",
        key: `reject-${rejectingId}`,
        duration: 3
      });
      // Refresh amendments data instead of optimistic update
      setTimeout(async () => {
        const res = await getContractAmendments(contract.id);
        setAmendments(res.data || res);
      }, 300);
      setRejectModalOpen(false);
      setRejectingId(null);
      setRejectReason("");
    } catch {
      message.error({
        content: "T·ª´ ch·ªëi th·∫•t b·∫°i!",
        key: `reject-error-${rejectingId}`,
        duration: 4
      });
    } finally {
      setRejectLoading(false);
    }
  };

  const handleExportPdf = async () => {
    if (!contract?.id) return;
    try {
      const blob = await exportContractPdf(contract.id);
      const url = window.URL.createObjectURL(blob);
      window.open(url, "_blank");
    } catch (err) {
      message.error("T·∫£i xu·ªëng h·ª£p ƒë·ªìng th·∫•t b·∫°i!");
    }
  };

  const openRenewModal = () => {
    setRenewModalOpen(true);
    setRenewReason("");
    setRenewEndDate(null);
  };
  const handleSendRenewRequest = async () => {
    if (!renewEndDate) {
      message.error({
        content: 'Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c m·ªõi!',
        key: 'renew-validation'
      });
      return;
    }
    
    // Prevent multiple simultaneous requests
    if (renewingContract) {
      return;
    }
    
    // Validate ng√†y k·∫øt th√∫c m·ªõi
    const contractEnd = dayjs(contract.contractEndDate);
    const selectedEnd = dayjs(renewEndDate);
    const monthsDiff = selectedEnd.diff(contractEnd, 'month', true); // true ƒë·ªÉ l·∫•y s·ªë th·∫≠p ph√¢n
    
    // Validate theo chu k·ª≥ thanh to√°n
    if (contract.paymentCycle === 'MONTHLY') {
      if (monthsDiff < 1) {
        message.error({
          content: 'Th·ªùi gian gia h·∫°n ph·∫£i t·ªëi thi·ªÉu 1 th√°ng!',
          key: 'renew-validation'
        });
        return;
      }
    } else if (contract.paymentCycle === 'QUARTERLY') {
      if (monthsDiff < 3 || Math.abs(monthsDiff % 3) > 0.1) { // Allow small floating point errors
        message.error({
          content: 'Th·ªùi gian gia h·∫°n ph·∫£i l√† b·ªôi s·ªë c·ªßa qu√Ω (3, 6, 9... th√°ng)!',
          key: 'renew-validation'
        });
        return;
      }
    } else if (contract.paymentCycle === 'YEARLY') {
      if (monthsDiff < 12 || Math.abs(monthsDiff % 12) > 0.1) { // Allow small floating point errors
        message.error({
          content: 'Th·ªùi gian gia h·∫°n ph·∫£i l√† b·ªôi s·ªë c·ªßa nƒÉm (12, 24, 36... th√°ng)!',
          key: 'renew-validation'
        });
        return;
      }
    }
    
    // Ki·ªÉm tra c√≥ ƒëang trong th·ªùi gian cho ph√©p gia h·∫°n (30 ng√†y tr∆∞·ªõc h·∫øt h·∫°n)
    const daysToExpiry = contractEnd.diff(dayjs(), 'day');
    if (daysToExpiry > 30) {
      message.error({
        content: 'Ch·ªâ c√≥ th·ªÉ y√™u c·∫ßu gia h·∫°n trong v√≤ng 30 ng√†y tr∆∞·ªõc khi h·ª£p ƒë·ªìng h·∫øt h·∫°n!',
        key: 'renew-validation'
      });
      return;
    }
    
    setRenewingContract(true);
    
    try {
      // S·ª≠ d·ª•ng standardized renewal request logic
      const formattedDate = dayjs(renewEndDate).endOf('day').toISOString();
      await renewContract(contract.id, formattedDate, renewReason);
      
      message.success({
        content: 'ƒê√£ g·ª≠i y√™u c·∫ßu gia h·∫°n, ch·ªù ch·ªß nh√† duy·ªát!',
        key: 'renew-success',
        duration: 4
      });
      setRenewModalOpen(false);
      setRenewEndDate(null);
      setRenewReason("");
      
      // Refresh data after a short delay to ensure backend is updated
      setTimeout(() => {
        fetchData();
      }, 500);
    } catch (e) {
      let errorMsg = 'G·ª≠i y√™u c·∫ßu gia h·∫°n th·∫•t b·∫°i!';
      
      if (e.response?.data?.message) {
        errorMsg = e.response.data.message;
      } else if (e.response?.data) {
        errorMsg = e.response.data;
      } else if (e.message) {
        errorMsg = e.message;
      }
      
      message.error({
        content: errorMsg,
        key: 'renew-error',
        duration: 5
      });
    } finally {
      setRenewingContract(false);
    }
  };

  if (loading) {
    return (
      <div style={{ display: "flex", minHeight: "100vh" }}>
        <RenterSidebar />
        <div style={{ flex: 1, display: "flex", alignItems: "center", justifyContent: "center" }}>
          <div style={{ textAlign: "center" }}>
            <Spin size="large" />
            <div style={{ marginTop: 16 }}>ƒêang t·∫£i th√¥ng tin h·ª£p ƒë·ªìng...</div>
          </div>
        </div>
      </div>
    );
  }

  if (!contract) {
    return (
      <div style={{ display: "flex", minHeight: "100vh" }}>
        <RenterSidebar />
        <div style={{ flex: 1, display: "flex", alignItems: "center", justifyContent: "center" }}>
          <div style={{ textAlign: "center" }}>
            <Title level={3}>Ch∆∞a c√≥ h·ª£p ƒë·ªìng</Title>
            <Text type="secondary">B·∫°n ch∆∞a c√≥ h·ª£p ƒë·ªìng thu√™ n√†o.</Text>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div style={{ display: "flex", minHeight: "100vh", background: "#f5f5f5" }}>
      {!isMobile && (
        <div style={{ width: 220, minHeight: "100vh", background: "#001529", position: "fixed", left: 0, top: 0, bottom: 0, zIndex: 10 }}>
          <RenterSidebar />
        </div>
      )}
      <div
        style={{
          flex: 1,
          marginLeft: !isMobile ? 220 : 0,
          minHeight: "100vh",
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "flex-start",
          padding: isMobile ? "16px 0" : "40px 0",
        }}
      >
        <div style={{ width: "100%", maxWidth: 1100, margin: "0 auto", padding: isMobile ? 8 : 0 }}>
          <Card style={{ borderRadius: "16px", boxShadow: "0 2px 12px rgba(0,0,0,0.08)", margin: "0 auto", background: "#fff" }}>
            {/* Header v·ªõi th√¥ng tin ch√≠nh */}
            <div style={{ 
              padding: "24px 24px 16px 24px",
              borderBottom: "1px solid #f0f0f0",
              marginBottom: 24
            }}>
              <Title level={2} style={{ margin: 0, color: "#1890ff", fontSize: isMobile ? 20 : 28, textAlign: "center" }}>
                <FileTextOutlined style={{ marginRight: 8 }} />
                H·ª£p ƒë·ªìng thu√™ nh√†
                {hasNewChanges && <Badge count="M·ªõi" style={{ marginLeft: 8 }} />}
              </Title>
              <div style={{ marginTop: 8, textAlign: "center" }}>
                <Text type="secondary" style={{ fontSize: isMobile ? 14 : 16 }}>
                  Th√¥ng tin chi ti·∫øt v·ªÅ h·ª£p ƒë·ªìng thu√™ nh√† c·ªßa b·∫°n
                </Text>
              </div>
              {lastUpdated && (
                <div style={{ textAlign: "center", marginTop: 8 }}>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {lastUpdated.toLocaleTimeString('vi-VN')}
                  </Text>
                </div>
              )}
            </div>

            {hasNewChanges && (
              <Alert
                message="C√≥ thay ƒë·ªïi m·ªõi trong h·ª£p ƒë·ªìng!"
                description="H·ªá th·ªëng ƒë√£ ph√°t hi·ªán h·ª£p ƒë·ªìng m·ªõi ho·∫∑c c√≥ c·∫≠p nh·∫≠t. Vui l√≤ng ki·ªÉm tra th√¥ng tin."
                type="info"
                showIcon
                closable
                onClose={() => setHasNewChanges(false)}
                style={{ marginBottom: 24 }}
              />
            )}
            
            <div
              style={{
                display: "flex",
                flexDirection: isMobile ? "column" : "row",
                flexWrap: "wrap",
                justifyContent: "center",
                gap: 24,
              }}
            >
              {/* Main contract info */}
              <div style={{ flex: 1, minWidth: isMobile ? "100%" : 340, maxWidth: isMobile ? "100%" : 600 }}>
                <Card 
                  title={
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <span>Th√¥ng tin h·ª£p ƒë·ªìng</span>
                      <Tag 
                        color={getStatusColor(contract.contractStatus || contract.status)}
                        style={{ fontSize: "12px", fontWeight: "bold" }}
                      >
                        {getStatusText(contract.contractStatus || contract.status)}
                      </Tag>
                    </div>
                  } 
                  style={{ marginBottom: 24 }}
                >
                  <Descriptions bordered column={2} size={isMobile ? "small" : "default"}>
                    <Descriptions.Item label="M√£ h·ª£p ƒë·ªìng">
                      <Text strong style={{ color: "#1890ff" }}>
                        #{contract.id || contract.contractNumber}
                      </Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="Ph√≤ng">
                      <Tag color="blue" style={{ fontWeight: "bold" }}>
                        {contract.roomNumber}
                      </Tag>
                    </Descriptions.Item>
                    <Descriptions.Item label="Ng√†y b·∫Øt ƒë·∫ßu">
                      <Text>
                        <ClockCircleOutlined style={{ marginRight: 4, color: "#52c41a" }} />
                        {dayjs(contract.contractStartDate || contract.startDate).format("DD/MM/YYYY")}
                      </Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="Ng√†y k·∫øt th√∫c">
                      <Text>
                        <ClockCircleOutlined style={{ marginRight: 4, color: "#ff4d4f" }} />
                        {dayjs(contract.contractEndDate || contract.endDate).format("DD/MM/YYYY")}
                      </Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="Ti·ªÅn thu√™ h√†ng th√°ng">
                      <Text strong style={{ color: "#52c41a", fontSize: "16px" }}>
                        {contract.rentAmount?.toLocaleString() || contract.monthlyRent?.toLocaleString()} ‚Ç´/th√°ng
                      </Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="Ti·ªÅn ƒë·∫∑t c·ªçc">
                      <Text strong style={{ color: "#faad14", fontSize: "16px" }}>
                        {contract.depositAmount?.toLocaleString() || contract.deposit?.toLocaleString()} ‚Ç´
                      </Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="Chu k·ª≥ thanh to√°n">
                      <Tag color="purple">
                        {contract.paymentCycle === 'MONTHLY' ? 'H√†ng th√°ng' : 
                         contract.paymentCycle === 'QUARTERLY' ? 'H√†ng qu√Ω' : 'H√†ng nƒÉm'}
                      </Tag>
                    </Descriptions.Item>
                    <Descriptions.Item label="Th·ªùi gian c√≤n l·∫°i">
                      {contract.contractStatus === 'ACTIVE' && dayjs(contract.contractEndDate).isAfter(dayjs()) ? (
                        <Countdown
                          value={dayjs(contract.contractEndDate).valueOf()}
                          format="D [ng√†y] H [gi·ªù] m [ph√∫t]"
                          valueStyle={{ fontSize: '14px', color: dayjs(contract.contractEndDate).diff(dayjs(), 'day') <= 30 ? '#ff4d4f' : '#52c41a' }}
                        />
                      ) : (
                        <Text type={contract.contractStatus === 'EXPIRED' ? 'danger' : 'secondary'}>
                          {contract.contractStatus === 'EXPIRED' ? 'ƒê√£ h·∫øt h·∫°n' : 'Kh√¥ng x√°c ƒë·ªãnh'}
                        </Text>
                      )}
                    </Descriptions.Item>
                  </Descriptions>
                  
                  {/* Quick actions */}
                  <div style={{ marginTop: 16, display: 'flex', gap: 8, flexWrap: 'wrap' }}>
                    <Button
                      type="primary"
                      icon={<FileTextOutlined />}
                      onClick={handleExportPdf}
                      style={{ flex: 1, minWidth: 120 }}
                    >
                      T·∫£i h·ª£p ƒë·ªìng PDF
                    </Button>
                    
                    {((contract.contractStatus === 'ACTIVE' && dayjs(contract.contractEndDate).diff(dayjs(), 'day') <= 30 && dayjs(contract.contractEndDate).diff(dayjs(), 'day') >= 0)
                      || contract.contractStatus === 'EXPIRED') && (
                      <Button 
                        type="default" 
                        onClick={openRenewModal}
                        style={{ flex: 1, minWidth: 120 }}
                      >
                        Y√™u c·∫ßu gia h·∫°n
                      </Button>
                    )}
                  </div>
                </Card>
                
                {/* Renter info */}
                <Card title="Th√¥ng tin ng∆∞·ªùi thu√™">
                  <Descriptions bordered column={1} size={isMobile ? "small" : "default"}>
                    <Descriptions.Item label="H·ªç v√† t√™n">
                      <Text strong>{renterInfo?.fullName}</Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i">
                      <Text>{renterInfo?.phoneNumber}</Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="CCCD/CMND">
                      <Text>{renterInfo?.nationalID || 'Ch∆∞a c·∫≠p nh·∫≠t'}</Text>
                    </Descriptions.Item>
                    <Descriptions.Item label="ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫">
                      <Text>{renterInfo?.permanentAddress || 'Ch∆∞a c·∫≠p nh·∫≠t'}</Text>
                    </Descriptions.Item>
                  </Descriptions>
                </Card>
              </div>

              {/* Terms and actions */}
              <div style={{ flex: 1, minWidth: isMobile ? "100%" : 280, maxWidth: isMobile ? "100%" : 350, marginTop: isMobile ? 16 : 0 }}>
                <Card title="ƒêi·ªÅu kho·∫£n h·ª£p ƒë·ªìng" style={{ position: isMobile ? "static" : "sticky", top: 20, marginBottom: 16 }}>
                  <div style={{ maxHeight: 200, overflowY: 'auto' }}>
                    {contract.terms?.length > 0 ? contract.terms.map((term, index) => (
                      <div key={index} style={{ marginBottom: 12, padding: 8, background: '#f9f9f9', borderRadius: 4 }}>
                        <Text style={{ fontSize: isMobile ? 14 : 16 }}>
                          <InfoCircleOutlined style={{ marginRight: 6, color: '#1890ff' }} />
                          {typeof term === 'object' ? term.content : term}
                        </Text>
                      </div>
                    )) : (
                      <Text type="secondary" style={{ fontStyle: 'italic' }}>
                        Kh√¥ng c√≥ ƒëi·ªÅu kho·∫£n c·ª• th·ªÉ ƒë∆∞·ª£c ghi nh·∫≠n.
                      </Text>
                    )}
                  </div>
                </Card>

                {/* Amendment history quick view */}
                <Card title="Thay ƒë·ªïi g·∫ßn ƒë√¢y" size="small">
                  <Button
                    type="link"
                    icon={<HistoryOutlined />}
                    onClick={handleViewAmendments}
                    style={{ padding: 0 }}
                  >
                    Xem t·∫•t c·∫£ thay ƒë·ªïi h·ª£p ƒë·ªìng
                  </Button>
                </Card>
              </div>
            </div>
          </Card>
        </div>
        
        {/* Contract History Modal */}
        <Modal
          open={historyModalOpen}
          onCancel={() => setHistoryModalOpen(false)}
          footer={null}
          title="L·ªãch s·ª≠ h·ª£p ƒë·ªìng"
          width={800}
        >
          <Timeline mode="left">
            {contractHistory.map((hist, index) => (
              <Timeline.Item
                key={hist.id}
                color={hist.contractStatus === 'ACTIVE' ? 'green' : hist.contractStatus === 'EXPIRED' ? 'red' : 'blue'}
                label={
                  <div style={{ textAlign: 'right', minWidth: 120 }}>
                    <div style={{ fontWeight: 'bold' }}>#{hist.id}</div>
                    <div style={{ fontSize: 12, color: '#666' }}>
                      {dayjs(hist.updatedDate || hist.createdDate).format('DD/MM/YYYY')}
                    </div>
                  </div>
                }
              >
                <Card size="small" style={{ marginBottom: 8 }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
                    <Tag color={getStatusColor(hist.contractStatus)}>
                      {getStatusText(hist.contractStatus)}
                    </Tag>
                    {index === 0 && <Badge count="Hi·ªán t·∫°i" style={{ backgroundColor: '#52c41a' }} />}
                  </div>
                  <div style={{ fontSize: 13 }}>
                    <div><strong>Ph√≤ng:</strong> {hist.roomNumber}</div>
                    <div><strong>Th·ªùi gian:</strong> {dayjs(hist.contractStartDate).format('DD/MM/YYYY')} - {dayjs(hist.contractEndDate).format('DD/MM/YYYY')}</div>
                    <div><strong>Ti·ªÅn thu√™:</strong> {hist.rentAmount?.toLocaleString()} ‚Ç´/th√°ng</div>
                    {hist.contractStatus === 'ACTIVE' && (
                      <div style={{ marginTop: 8 }}>
                        <Button
                          size="small"
                          type="primary"
                          icon={<FileTextOutlined />}
                          onClick={() => {
                            setHistoryModalOpen(false);
                            handleExportPdf();
                          }}
                        >
                          T·∫£i PDF
                        </Button>
                      </div>
                    )}
                  </div>
                </Card>
              </Timeline.Item>
            ))}
          </Timeline>
        </Modal>

        {/* Amendment History Modal */}
        <Modal
          open={amendmentsModalOpen}
          onCancel={() => { setAmendmentsModalOpen(false); setAmendmentsPage(1); }} 
          footer={null}
          title="Y√™u c·∫ßu thay ƒë·ªïi h·ª£p ƒë·ªìng"
        >
          {/* Hi·ªÉn th·ªã amendments */}
          {(() => {
            console.log('Amendments debug:', {
              total: amendments.length,
              pending: amendments.filter(a => a.status === 'PENDING').length,
              approved: amendments.filter(a => a.status === 'APPROVED').length,
              rejected: amendments.filter(a => a.status === 'REJECTED').length
            });
            
                return (
              <>

                
                <List
                  dataSource={amendments.slice((amendmentsPage-1)*amendmentsPageSize, amendmentsPage*amendmentsPageSize)}
                  renderItem={item => (
                    <List.Item>
                      <div style={{ 
                        width: '100%',
                        padding: 16, 
                        border: '1px solid #dee2e6', 
                        borderRadius: 6, 
                        backgroundColor: '#fff',
                        marginBottom: 12
                      }}>
                        {/* Header v·ªõi lo·∫°i v√† tr·∫°ng th√°i */}
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'center',
                          marginBottom: 12,
                          paddingBottom: 8,
                          borderBottom: '1px solid #f0f0f0'
                        }}>
                          <div style={{ fontSize: 15, fontWeight: 600, color: '#495057' }}>
                            Lo·∫°i: {getAmendmentTypeText(item.amendmentType)}
                        </div>
                          <div style={{ 
                            padding: '4px 8px', 
                            borderRadius: 4, 
                            fontSize: 12,
                            fontWeight: 500,
                            backgroundColor: item.status === 'APPROVED' ? '#28a745' : 
                                             item.status === 'REJECTED' ? '#dc3545' : '#ffc107',
                            color: '#fff',
                            border: item.status === 'APPROVED' ? '1px solid #28a745' : 
                                    item.status === 'REJECTED' ? '1px solid #dc3545' : '1px solid #ffc107'
                          }}>
                            {getAmendmentStatusText(item.status)}
                          </div>
                          </div>
                        
                        {/* L√Ω do thay ƒë·ªïi */}
                        <div style={{ marginBottom: 16 }}>
                          <div style={{ 
                            fontWeight: 600, 
                            color: '#495057', 
                            marginBottom: 6,
                            fontSize: 13
                          }}>
                            L√Ω do thay ƒë·ªïi:
                          </div>
                          <div style={{ 
                            fontSize: 13, 
                            color: '#333',
                            padding: '8px 12px',
                            backgroundColor: '#f8f9fa',
                            borderRadius: 6,
                            border: '1px solid #e9ecef'
                          }}>
                            {item.reason || <span style={{ color: '#888', fontStyle: 'italic' }}>Kh√¥ng c√≥ l√Ω do</span>}
                        </div>
                      </div>

                      {/* Hi·ªÉn th·ªã chi ti·∫øt thay ƒë·ªïi */}
                      {(item.oldValue || item.newValue) && (
                          <div style={{ 
                            marginBottom: 16, 
                            padding: 12, 
                            backgroundColor: '#f8f9fa', 
                            border: '1px solid #dee2e6', 
                            borderRadius: 6
                          }}>
                            <div style={{ 
                              fontWeight: 600, 
                              color: '#495057', 
                              marginBottom: 8,
                              fontSize: 13
                            }}>
                              Thay ƒë·ªïi:
                          </div>
                            
                            <div style={{ display: 'flex', flexDirection: 'column', gap: 8, fontSize: 13 }}>
                              {(() => {
                                const oldLines = (item.oldValue || '').split(';').filter(line => line.trim());
                                const newLines = (item.newValue || '').split(';').filter(line => line.trim());
                                
                                // T·∫°o map ƒë·ªÉ so s√°nh t·ª´ng ph·∫ßn
                                const oldMap = {};
                                const newMap = {};
                                
                                // X·ª≠ l√Ω ƒëi·ªÅu kho·∫£n tr∆∞·ªõc - g·ªôp t·∫•t c·∫£ th√†nh 1 key
                                let oldTerms = '';
                                let newTerms = '';
                                
                                oldLines.forEach(line => {
                                  const key = line.split(':')[0]?.trim();
                                  if (key && key.includes('ƒêi·ªÅu kho·∫£n')) {
                                    oldTerms = line.trim();
                                  } else if (key) {
                                    oldMap[key] = line.trim();
                                  }
                                });
                                
                                newLines.forEach(line => {
                                  const key = line.split(':')[0]?.trim();
                                  if (key && key.includes('ƒêi·ªÅu kho·∫£n')) {
                                    newTerms = line.trim();
                                  } else if (key) {
                                    newMap[key] = line.trim();
                                  }
                                });
                                
                                // G·ªôp t·∫•t c·∫£ ƒëi·ªÅu kho·∫£n v√†o m·ªôt key duy nh·∫•t
                                if (oldTerms || newTerms) {
                                  oldMap['ƒêi·ªÅu kho·∫£n'] = oldTerms;
                                  newMap['ƒêi·ªÅu kho·∫£n'] = newTerms;
                                }
                                
                                // L·∫•y t·∫•t c·∫£ keys
                                const allKeys = [...new Set([...Object.keys(oldMap), ...Object.keys(newMap)])];
                                
                                // Ch·ªâ hi·ªÉn th·ªã nh·ªØng ph·∫ßn c√≥ thay ƒë·ªïi
                                const filteredKeys = allKeys.filter(key => {
                                  const oldValue = oldMap[key] || '';
                                  const newValue = newMap[key] || '';
                                  
                                  // N·∫øu l√† s·ªë ti·ªÅn, so s√°nh gi√° tr·ªã s·ªë
                                  if (key.includes('Ti·ªÅn') || key.includes('ti·ªÅn')) {
                                    const oldNum = parseFloat(oldValue.replace(/[^\d.-]/g, ''));
                                    const newNum = parseFloat(newValue.replace(/[^\d.-]/g, ''));
                                    return !isNaN(oldNum) && !isNaN(newNum) && oldNum !== newNum;
                                  } else if (key.includes('ƒêi·ªÅu kho·∫£n') || key.includes('ƒëi·ªÅu kho·∫£n')) {
                                    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho ƒëi·ªÅu kho·∫£n
                                    const oldClean = oldValue.replace(/^ƒêi·ªÅu kho·∫£n:\s*/, '').trim();
                                    const newClean = newValue.replace(/^ƒêi·ªÅu kho·∫£n:\s*/, '').trim();
                                    
                                    // Chu·∫©n h√≥a "Kh√¥ng c√≥ ƒëi·ªÅu kho·∫£n" v√† "Kh√¥ng c√≥"
                                    const normalizeTerms = (str) => {
                                      if (str === 'Kh√¥ng c√≥ ƒëi·ªÅu kho·∫£n' || str === 'Kh√¥ng c√≥' || str === '') {
                                        return 'Kh√¥ng c√≥ ƒëi·ªÅu kho·∫£n';
                                      }
                                      return str;
                                    };
                                    
                                    const normalizedOld = normalizeTerms(oldClean);
                                    const normalizedNew = normalizeTerms(newClean);
                                    
                                    // Ch·ªâ hi·ªÉn th·ªã n·∫øu th·ª±c s·ª± kh√°c nhau
                                    return normalizedOld !== normalizedNew;
                                  } else {
                                    // So s√°nh chu·ªói th√¥ng th∆∞·ªùng
                                    return oldValue !== newValue;
                                  }
                                });
                                
                                // Lo·∫°i b·ªè c√°c key tr√πng l·∫∑p v·ªÅ m·∫∑t ng·ªØ nghƒ©a
                                const uniqueKeys = [];
                                const seenNormalized = new Set();
                                
                                filteredKeys.forEach(key => {
                                  const oldValue = oldMap[key] || '';
                                  const newValue = newMap[key] || '';
                                  
                                  if (key.includes('ƒêi·ªÅu kho·∫£n') || key.includes('ƒëi·ªÅu kho·∫£n')) {
                                    const oldClean = oldValue.replace(/^ƒêi·ªÅu kho·∫£n:\s*/, '').trim();
                                    const newClean = newValue.replace(/^ƒêi·ªÅu kho·∫£n:\s*/, '').trim();
                                    
                                    const normalizeTerms = (str) => {
                                      if (str === 'Kh√¥ng c√≥ ƒëi·ªÅu kho·∫£n' || str === 'Kh√¥ng c√≥' || str === '') {
                                        return 'Kh√¥ng c√≥ ƒëi·ªÅu kho·∫£n';
                                      }
                                      return str;
                                    };
                                    
                                    const normalizedOld = normalizeTerms(oldClean);
                                    const normalizedNew = normalizeTerms(newClean);
                                    const normalizedPair = `${normalizedOld}->${normalizedNew}`;
                                    
                                    if (!seenNormalized.has(normalizedPair)) {
                                      seenNormalized.add(normalizedPair);
                                      uniqueKeys.push(key);
                                    }
                                  } else {
                                    uniqueKeys.push(key);
                                  }
                                });
                                
                                return uniqueKeys
                                  .map((key, index) => {
                                    const oldValue = oldMap[key] || 'Kh√¥ng c√≥';
                                    const newValue = newMap[key] || 'Kh√¥ng c√≥';
                                    
                                    return (
                                      <div key={index} style={{ 
                                        display: 'flex', 
                                        alignItems: 'center', 
                                        gap: 8,
                                        padding: '6px 0'
                                      }}>
                                        <div style={{ 
                                          flex: 1,
                                          padding: '6px 8px', 
                                          backgroundColor: '#fff', 
                                          border: '1px solid #dc3545', 
                                          borderRadius: 4,
                                          minHeight: '32px',
                                          display: 'flex',
                                          alignItems: 'center'
                                        }}>
                                          <span style={{ 
                                            color: '#dc3545', 
                                            fontWeight: 400,
                                            fontSize: 12,
                                            lineHeight: 1.3
                                          }}>
                                            {formatAmendmentValue(oldValue)}
                            </span>
                          </div>
                                        <span style={{ 
                                          color: '#6c757d', 
                                          fontSize: 14, 
                                          fontWeight: 400,
                                          padding: '0 6px'
                                        }}>‚Üí</span>
                                        <div style={{ 
                                          flex: 1,
                                          padding: '6px 8px', 
                                          backgroundColor: '#fff', 
                                          border: '1px solid #28a745', 
                                          borderRadius: 4,
                                          minHeight: '32px',
                                          display: 'flex',
                                          alignItems: 'center'
                                        }}>
                                          <span style={{ 
                                            color: '#28a745', 
                                            fontWeight: 400,
                                            fontSize: 12,
                                            lineHeight: 1.3
                                          }}>
                                            {formatAmendmentValue(newValue)}
                            </span>
                                        </div>
                                      </div>
                                    );
                                  });
                              })()}
                          </div>
                        </div>
                      )}

                        {/* Ng√†y t·∫°o */}
                        <div style={{ 
                          fontSize: 13, 
                          color: '#6c757d',
                          marginBottom: 16,
                          padding: '8px 12px',
                          backgroundColor: '#f8f9fa',
                          borderRadius: 6,
                          border: '1px solid #e9ecef'
                        }}>
                          Ng√†y t·∫°o: {item.createdDate ? new Date(item.createdDate).toLocaleDateString("vi-VN") : 'Kh√¥ng c√≥'}
                        </div>

                        {/* Buttons cho PENDING */}
                        {item.status === 'PENDING' && !item.approvedByLandlord && (!item.rejectedBy || item.rejectedBy.length === 0) && (
                          <div style={{ display: 'flex', gap: 12 }}>
                            <Button
                              type="primary"
                              size="middle"
                              onClick={() => handleApproveAmendment(item.id, true)}
                              style={{ flex: 1, height: 40 }}
                            >
                              Duy·ªát
                            </Button>
                            <Button
                              danger
                              size="middle"
                              onClick={() => handleRejectAmendment(item.id)}
                              style={{ flex: 1, height: 40 }}
                            >
                              T·ª´ ch·ªëi
                            </Button>
                          </div>
                        )}

                        {/* L√Ω do t·ª´ ch·ªëi cho REJECTED */}
                      {item.status === 'REJECTED' && item.reason && (
                          <div style={{ 
                            marginTop: 12,
                            padding: 8,
                            backgroundColor: '#f8f9fa',
                            border: '1px solid #dee2e6',
                            borderRadius: 4
                          }}>
                            <div style={{ 
                              fontWeight: 600, 
                              color: '#495057',
                              fontSize: 13,
                              marginBottom: 4
                            }}>
                              L√Ω do t·ª´ ch·ªëi:
                          </div>
                            <div style={{ 
                              fontSize: 12, 
                              color: '#6c757d',
                              fontStyle: 'italic'
                            }}>
                              {item.reason}
                          </div>
                        </div>
                      )}
                    </div>
                  </List.Item>
                  )}
                  locale={{ emptyText: "Kh√¥ng c√≥ y√™u c·∫ßu thay ƒë·ªïi" }}
                />
                {amendments.length > amendmentsPageSize && (
                  <div style={{ textAlign: 'center', marginTop: 16 }}>
                    <Pagination
                      current={amendmentsPage}
                      pageSize={amendmentsPageSize}
                      total={amendments.length}
                      onChange={setAmendmentsPage}
                      showSizeChanger={false}
                    />
                  </div>
                )}
              </>
            );
          })()}
        </Modal>

        {/* Renewal Request Modal */}
        <Modal
          open={renewModalOpen}
          onCancel={() => setRenewModalOpen(false)}
          onOk={handleSendRenewRequest}
          okText="G·ª≠i y√™u c·∫ßu"
          confirmLoading={renewingContract}
          title="Y√™u c·∫ßu gia h·∫°n h·ª£p ƒë·ªìng"
          width={600}
        >
          <div style={{ marginBottom: 16 }}>
            <Alert
              message="Th√¥ng tin h·ª£p ƒë·ªìng hi·ªán t·∫°i"
              description={
                <div>
                  <div>‚Ä¢ Ng√†y k·∫øt th√∫c: {dayjs(contract.contractEndDate).format("DD/MM/YYYY")}</div>
                  <div>‚Ä¢ Chu k·ª≥ thanh to√°n: {contract.paymentCycle === 'MONTHLY' ? 'H√†ng th√°ng' : contract.paymentCycle === 'QUARTERLY' ? 'H√†ng qu√Ω' : 'H√†ng nƒÉm'}</div>
                </div>
              }
              type="info"
              showIcon
            />
          </div>
          
          <div style={{ marginBottom: 16, padding: 12, backgroundColor: '#f6f6f6', borderRadius: 6 }}>
            <div style={{ fontWeight: 'bold', marginBottom: 8 }}>üìã L∆∞u √Ω v·ªÅ th·ªùi gian gia h·∫°n:</div>
            <div>‚Ä¢ Ch·ªâ c√≥ th·ªÉ y√™u c·∫ßu gia h·∫°n trong v√≤ng 30 ng√†y tr∆∞·ªõc khi h·∫øt h·∫°n</div>
            <div>‚Ä¢ Th·ªùi gian gia h·∫°n ph·∫£i ph√π h·ª£p v·ªõi chu k·ª≥ thanh to√°n:</div>
            <div style={{ marginLeft: 16, color: '#1890ff', fontWeight: 500 }}>
              {contract.paymentCycle === 'MONTHLY' && '‚Üí T·ªëi thi·ªÉu 1 th√°ng (c√≥ th·ªÉ gia h·∫°n b·∫•t k·ª≥ s·ªë th√°ng n√†o)'}
              {contract.paymentCycle === 'QUARTERLY' && '‚Üí T·ªëi thi·ªÉu 3 th√°ng (b·ªôi s·ªë c·ªßa qu√Ω: 3, 6, 9...)'}
              {contract.paymentCycle === 'YEARLY' && '‚Üí T·ªëi thi·ªÉu 12 th√°ng (b·ªôi s·ªë c·ªßa nƒÉm: 12, 24, 36...)'}
            </div>
          </div>

          <div style={{ marginBottom: 16 }}>
            <label style={{ fontWeight: 'bold', marginBottom: 8, display: 'block' }}>
              üìÖ Ng√†y k·∫øt th√∫c m·ªõi:
            </label>
            <DatePicker
              style={{ width: '100%' }}
              value={renewEndDate ? dayjs(renewEndDate) : null}
              onChange={d => setRenewEndDate(d ? d.toISOString() : null)}
              format="DD/MM/YYYY"
              placeholder="Ch·ªçn ng√†y k·∫øt th√∫c m·ªõi"
              disabledDate={current => {
                if (!current || !contract.contractEndDate) return true;
                return current <= dayjs(contract.contractEndDate);
              }}
            />
          </div>
          
          <div>
            <label style={{ fontWeight: 'bold', marginBottom: 8, display: 'block' }}>
              üìù L√Ω do gia h·∫°n:
            </label>
            <textarea
              value={renewReason}
              onChange={e => setRenewReason(e.target.value)}
              rows={3}
              style={{ width: '100%', padding: 8, borderRadius: 4, border: '1px solid #d9d9d9' }}
              placeholder="Nh·∫≠p l√Ω do ho·∫∑c mong mu·ªën gia h·∫°n (kh√¥ng b·∫Øt bu·ªôc)"
            />
          </div>
        </Modal>

        {/* Reject Amendment Modal */}
        <Modal
          open={rejectModalOpen}
          onCancel={() => {
            setRejectModalOpen(false);
            setRejectingId(null);
            setRejectReason("");
          }}
          onOk={doRejectAmendment}
          okText="X√°c nh·∫≠n t·ª´ ch·ªëi"
          okType="danger"
          title="L√Ω do t·ª´ ch·ªëi thay ƒë·ªïi h·ª£p ƒë·ªìng"
          confirmLoading={rejectLoading}
        >
          <Alert
            message="B·∫°n ƒëang t·ª´ ch·ªëi thay ƒë·ªïi h·ª£p ƒë·ªìng"
            description="Vui l√≤ng nh·∫≠p l√Ω do c·ª• th·ªÉ ƒë·ªÉ ch·ªß nh√† hi·ªÉu v√† c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªÅ xu·∫•t."
            type="warning"
            showIcon
            style={{ marginBottom: 16 }}
          />
          <div style={{ marginBottom: 8, fontWeight: 'bold' }}>L√Ω do t·ª´ ch·ªëi:</div>
          <textarea
            value={rejectReason}
            onChange={e => setRejectReason(e.target.value)}
            rows={4}
            style={{ 
              width: '100%', 
              padding: 8, 
              borderRadius: 4, 
              border: '1px solid #d9d9d9',
              fontSize: 14
            }}
            placeholder="VD: Th·ªùi gian kh√¥ng ph√π h·ª£p, m·ª©c gi√° qu√° cao, ƒëi·ªÅu kho·∫£n ch∆∞a r√µ r√†ng..."
          />
        </Modal>
      </div>
    </div>
  );
}
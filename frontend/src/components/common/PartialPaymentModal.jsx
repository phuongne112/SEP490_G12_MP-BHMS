import React, { useState, useEffect } from 'react';
import { Modal, Form, InputNumber, Button, message, Alert, Space, Typography } from 'antd';
import { createPartialPaymentVnPayUrl, getPaymentCount } from '../../services/billApi';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
dayjs.extend(customParseFormat);
const { Text } = Typography;

const PartialPaymentModal = ({ visible, onCancel, onSuccess, bill }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [paymentAmount, setPaymentAmount] = useState(0);
  const [partialPaymentFee, setPartialPaymentFee] = useState(0);
  const [overdueInterest, setOverdueInterest] = useState(0);
  const [totalWithFees, setTotalWithFees] = useState(0);
  const [paymentCount, setPaymentCount] = useState(0);
  const [loadingPaymentCount, setLoadingPaymentCount] = useState(false);
  // Debug logs
  console.log('PartialPaymentModal render:', { visible, bill });

  // Ki·ªÉm tra bill c√≥ t·ªìn t·∫°i kh√¥ng
  if (!bill) {
    console.log('Bill is null/undefined, showing error modal');
    return (
      <Modal
        title="Thanh to√°n t·ª´ng ph·∫ßn"
        open={visible}
        onCancel={onCancel}
        footer={null}
        width={600}
      >
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Alert
            message="L·ªói"
            description="Kh√¥ng t√¨m th·∫•y th√¥ng tin h√≥a ƒë∆°n"
            type="error"
            showIcon
          />
        </div>
      </Modal>
    );
  }

  // L·∫•y s·ªë l·∫ßn thanh to√°n ƒë√£ th·ª±c hi·ªán v√† set gi√° tr·ªã m·∫∑c ƒë·ªãnh
  useEffect(() => {
    if (visible && bill?.id) {
      fetchPaymentCount();
      
      // Set gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† t·ªëi thi·ªÉu (50% s·ªë ti·ªÅn c√≤n n·ª£) ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi ti·ªÅn m·∫∑t
      const minAmount = getOutstandingAmount() * 0.5;
      setPaymentAmount(minAmount);
      form.setFieldsValue({ paymentAmount: minAmount });
      // ƒê·ªìng b·ªô t√≠nh ph√≠/l√£i v√† t·ªïng ti·ªÅn nh∆∞ logic ti·ªÅn m·∫∑t
      setTimeout(() => {
        try { handleAmountChange(minAmount); } catch (_) {}
      }, 0);
    }
  }, [visible, bill?.id]);

  const fetchPaymentCount = async () => {
    setLoadingPaymentCount(true);
    try {
      const response = await getPaymentCount(bill.id);
      setPaymentCount(response.paymentCount || 0);
    } catch (error) {
      console.error('Error fetching payment count:', error);
      setPaymentCount(0);
    } finally {
      setLoadingPaymentCount(false);
    }
  };

  // üÜï T√≠nh s·ªë ng√†y t·ª´ l·∫ßn thanh to√°n cu·ªëi c√πng
  const getDaysSinceLastPayment = () => {
    if (!bill || !bill.lastPaymentDate) return null;
    try {
      // Parse theo ƒë·ªãnh d·∫°ng t·ª´ backend v√† fallback ISO
      const parsed = dayjs(bill.lastPaymentDate, 'YYYY-MM-DD HH:mm:ss A', true);
      const lastPaymentDate = parsed.isValid() ? parsed : dayjs(bill.lastPaymentDate);
      if (!lastPaymentDate.isValid()) return null;
      const currentDate = dayjs();
      const daysDiff = currentDate.diff(lastPaymentDate, 'day');
      return Math.max(0, daysDiff);
    } catch (error) {
      console.error('Error calculating days since last payment:', error);
      return null;
    }
  };

  // üÜï Ki·ªÉm tra c√≥ th·ªÉ thanh to√°n t·ª´ng ph·∫ßn kh√¥ng
  const canMakePartialPayment = () => {
    if (!bill || !bill.isPartiallyPaid || !bill.lastPaymentDate) return true;
    
    const daysSinceLastPayment = getDaysSinceLastPayment();
    if (daysSinceLastPayment === null) return true;
    
    return daysSinceLastPayment >= 30;
  };

  // üÜï L·∫•y s·ªë ng√†y c√≤n l·∫°i c·∫ßn ƒë·ª£i
  const getRemainingDays = () => {
    const daysSinceLastPayment = getDaysSinceLastPayment();
    if (daysSinceLastPayment === null) return 0;
    
    return Math.max(0, 30 - daysSinceLastPayment);
  };

  // T√≠nh ph√≠ thanh to√°n t·ª´ng ph·∫ßn d·ª±a tr√™n s·ªë l·∫ßn thanh to√°n
  const calculatePartialPaymentFee = (paymentCount) => {
    switch (paymentCount) {
      case 0:
        return 200000; // 200.000 VNƒê cho l·∫ßn thanh to√°n ƒë·∫ßu ti√™n
      case 1:
        return 500000; // 500.000 VNƒê cho l·∫ßn thanh to√°n th·ª© 2
      case 2:
        return 1000000; // 1.000.000 VNƒê cho l·∫ßn thanh to√°n th·ª© 3
      default:
        return 1000000; // T·ªëi ƒëa 1.000.000 VNƒê cho c√°c l·∫ßn sau
    }
  };

  // T√≠nh l√£i su·∫•t qu√° h·∫°n d·ª±a tr√™n th·ªùi gian qu√° h·∫°n
  const calculateOverdueInterest = (amount, monthsOverdue) => {
    if (monthsOverdue <= 0) return 0;
    
    // L√£i su·∫•t theo th√°ng: 2% m·ªói th√°ng
    const monthlyRate = 0.02;
    const interest = amount * monthlyRate * monthsOverdue;
    
    // Gi·ªõi h·∫°n l√£i su·∫•t t·ªëi ƒëa: 5% c·ªßa s·ªë ti·ªÅn n·ª£
    const maxInterest = Math.min(interest, amount * 0.05);
    
    return Math.round(maxInterest);
  };

  // T√≠nh s·ªë th√°ng qu√° h·∫°n
  const calculateMonthsOverdue = () => {
    if (!bill.dueDate) return 0;
    
    try {
      const dueDate = dayjs(bill.dueDate);
      const currentDate = dayjs();
      
      if (currentDate.isBefore(dueDate)) return 0;
      
      const diffMonths = currentDate.diff(dueDate, 'month', true);
      return Math.max(0, Math.ceil(diffMonths));
    } catch (error) {
      console.error('Error calculating months overdue:', error);
      return 0;
    }
  };

  // T√≠nh to√°n ph√≠ v√† l√£i su·∫•t khi s·ªë ti·ªÅn thanh to√°n thay ƒë·ªïi
  useEffect(() => {
    const outstandingAmount = getOutstandingAmount();
    const remainingAmount = outstandingAmount - paymentAmount;
    const monthsOverdue = calculateMonthsOverdue();
    
    // T√≠nh ph√≠ thanh to√°n t·ª´ng ph·∫ßn (d·ª±a tr√™n s·ªë l·∫ßn thanh to√°n ƒë√£ th·ª±c hi·ªán)
    const partialFee = calculatePartialPaymentFee(paymentCount);
    
    // T√≠nh l√£i su·∫•t qu√° h·∫°n cho s·ªë ti·ªÅn c√≤n l·∫°i
    const overdueInt = calculateOverdueInterest(remainingAmount, monthsOverdue);
    
    console.log('Payment calculation:', {
      paymentAmount,
      paymentCount,
      partialFee,
      overdueInt,
      outstandingAmount,
      remainingAmount,
      monthsOverdue
    });
    
    setPartialPaymentFee(partialFee);
    setOverdueInterest(overdueInt);
    setTotalWithFees(paymentAmount + partialFee + overdueInt);
  }, [paymentAmount, bill, paymentCount]);

  const handleSubmit = async (values) => {
    setLoading(true);
    try {
      // ƒê·∫£m b·∫£o s·ªë ti·ªÅn l√† s·ªë h·ª£p l·ªá
      const paymentAmount = Number(values.paymentAmount) || 0;
      
      if (paymentAmount <= 0) {
        message.error('S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá');
        setLoading(false);
        return;
      }

      // üÜï Ki·ªÉm tra kho·∫£ng th·ªùi gian 30 ng√†y
      if (!canMakePartialPayment()) {
        const remainingDays = getRemainingDays();
        message.error(`B·∫°n ph·∫£i ƒë·ª£i th√™m ${remainingDays} ng√†y n·ªØa m·ªõi ƒë∆∞·ª£c thanh to√°n t·ª´ng ph·∫ßn ti·∫øp theo. Kho·∫£ng th·ªùi gian t·ªëi thi·ªÉu gi·ªØa c√°c l·∫ßn thanh to√°n t·ª´ng ph·∫ßn l√† 30 ng√†y.`);
        setLoading(false);
        return;
      }

      // T√≠nh t·ªïng s·ªë ti·ªÅn c·∫ßn thanh to√°n (bao g·ªìm c·∫£ ph√≠)
      const totalAmountToPay = paymentAmount + partialPaymentFee + overdueInterest;
      
      const request = {
        billId: bill.id,
        paymentAmount: totalAmountToPay, // G·ª≠i t·ªïng s·ªë ti·ªÅn bao g·ªìm c·∫£ ph√≠
        paymentMethod: 'VNPAY',
        notes: 'Thanh to√°n t·ª´ng ph·∫ßn qua VNPAY',
        partialPaymentFee: partialPaymentFee, // Ph√≠ thanh to√°n t·ª´ng ph·∫ßn
        overdueInterest: overdueInterest, // L√£i su·∫•t qu√° h·∫°n
        totalWithFees: totalAmountToPay, // T·ªïng bao g·ªìm c·∫£ ph√≠
        originalPaymentAmount: paymentAmount // L∆∞u s·ªë ti·ªÅn g·ªëc ƒë·ªÉ backend x·ª≠ l√Ω
      };

      console.log('Payment request:', request);
      console.log('Original amount:', paymentAmount, 'Total with fees:', totalAmountToPay);

      // T·∫°o URL thanh to√°n VNPAY
      const vnpayResponse = await createPartialPaymentVnPayUrl(request);
      if (vnpayResponse.success) {
        message.success(`ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPAY... T·ªïng thanh to√°n: ${formatCurrency(totalAmountToPay)}`);
        // üÜï Trigger refresh notifications ngay l·∫≠p t·ª©c
        window.dispatchEvent(new Event('refresh-notifications'));
        // üÜï Hi·ªán notification toast
        window.dispatchEvent(new CustomEvent('show-notification-toast', {
          detail: { message: `Y√™u c·∫ßu thanh to√°n ${formatCurrency(totalAmountToPay)} ƒë√£ ƒë∆∞·ª£c t·∫°o`, type: 'success' }
        }));
        window.location.href = vnpayResponse.paymentUrl;
      } else {
        message.error(vnpayResponse.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o link thanh to√°n');
      }
    } catch (error) {
      console.error('L·ªói thanh to√°n t·ª´ng ph·∫ßn:', error);
      
      // üÜï X·ª≠ l√Ω l·ªói b·∫£o v·ªá t·ª´ backend
      let errorMessage = 'C√≥ l·ªói x·∫£y ra khi thanh to√°n';
      
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      // üÜï Hi·ªÉn th·ªã th√¥ng b√°o l·ªói c·ª• th·ªÉ cho c√°c tr∆∞·ªùng h·ª£p b·∫£o v·ªá (gi·ªëng nh∆∞ trong CashFullPaymentModal)
      if (errorMessage.includes("ƒë√£ c√≥ y√™u c·∫ßu thanh to√°n ti·ªÅn m·∫∑t ƒëang ch·ªù x·ª≠ l√Ω")) {
        message.error(errorMessage, 8); // Hi·ªÉn th·ªã l√¢u h∆°n ƒë·ªÉ user ƒë·ªçc
      } else {
        message.error(errorMessage);
      }
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (amount) => {
    if (!amount) return '0 ‚Ç´';
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const getOutstandingAmount = () => {
    return bill.outstandingAmount || bill.totalAmount || 0;
  };

  const getMinPaymentAmount = () => {
    const outstanding = getOutstandingAmount();
    return outstanding * 0.5; // 50% c·ªßa s·ªë ti·ªÅn c√≤n n·ª£
  };

  const getMaxPaymentAmount = () => {
    const outstanding = getOutstandingAmount();
    // T√≠nh s·ªë ti·ªÅn t·ªëi ƒëa d·ª±a tr√™n s·ªë l·∫ßn thanh to√°n
    if (paymentCount === 0) {
      // L·∫ßn thanh to√°n ƒë·∫ßu ti√™n: t·ªëi ƒëa 80%
      return outstanding * 0.8;
    } else {
      // L·∫ßn th·ª© 2 tr·ªü ƒëi: t·ªëi ƒëa 100%
      return outstanding;
    }
  };

  const handleAmountChange = (value) => {
    // ƒê·∫£m b·∫£o gi√° tr·ªã l√† s·ªë
    const numericValue = Number(value) || 0;
    setPaymentAmount(numericValue);
    console.log('Amount changed:', { original: value, processed: numericValue });
  };

  const monthsOverdue = calculateMonthsOverdue();
  const outstandingAmount = getOutstandingAmount();
  const minPayment = getMinPaymentAmount();
  const maxPayment = getMaxPaymentAmount();

  // Handle cancel
  const handleCancel = () => {
    form.resetFields();
    onCancel();
  };

  return (
    <Modal
      title="Thanh to√°n t·ª´ng ph·∫ßn"
      open={visible}
      onCancel={handleCancel}
      footer={null}
      width={600}
    >
      <Form form={form} layout="vertical" onFinish={handleSubmit}>
        <Alert
          message="Th√¥ng tin h√≥a ƒë∆°n"
          description={
            <div>
              <p><strong>H√≥a ƒë∆°n #:</strong> {bill.id || 'N/A'}</p>
              <p><strong>Ph√≤ng:</strong> {bill.roomNumber || 'N/A'}</p>
              <p><strong>T·ªïng ti·ªÅn:</strong> {formatCurrency(bill.totalAmount)}</p>
              <p><strong>ƒê√£ thanh to√°n:</strong> {formatCurrency(bill.paidAmount || 0)}</p>
              <p><strong>C√≤n n·ª£:</strong> {formatCurrency(getOutstandingAmount())}</p>
              <p><strong>T·ªëi thi·ªÉu thanh to√°n (50%):</strong> <span style={{ color: '#faad14', fontWeight: 'bold' }}>{formatCurrency(minPayment)}</span></p>
              <p><strong>T·ªëi ƒëa thanh to√°n:</strong> 
                <span style={{ color: '#52c41a', fontWeight: 'bold' }}>{formatCurrency(maxPayment)}</span>
                <span style={{ color: '#52c41a', fontSize: '12px', marginLeft: '8px' }}>
                  ({paymentCount === 0 ? '80%' : '100%'} s·ªë ti·ªÅn c√≤n n·ª£)
                </span>
              </p>
              <p><strong>L·∫ßn thanh to√°n th·ª©:</strong> {paymentCount + 1}</p>
              
              {/* üÜï Hi·ªÉn th·ªã th√¥ng tin v·ªÅ kho·∫£ng th·ªùi gian 30 ng√†y */}
              {bill.isPartiallyPaid && bill.lastPaymentDate && (
                <div style={{ marginTop: 8, padding: '8px 12px', backgroundColor: '#fff2e8', border: '1px solid #ffbb96', borderRadius: '4px' }}>
                  <p style={{ margin: 0, fontSize: '12px', color: '#d46b08' }}>
                    <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> Kho·∫£ng th·ªùi gian t·ªëi thi·ªÉu gi·ªØa c√°c l·∫ßn thanh to√°n t·ª´ng ph·∫ßn l√† 30 ng√†y.
                  </p>
                  {!canMakePartialPayment() && (
                    <p style={{ margin: '4px 0 0 0', fontSize: '12px', color: '#cf1322', fontWeight: 'bold' }}>
                      B·∫°n c·∫ßn ƒë·ª£i th√™m {getRemainingDays()} ng√†y n·ªØa m·ªõi ƒë∆∞·ª£c thanh to√°n t·ª´ng ph·∫ßn ti·∫øp theo.
                    </p>
                  )}
                </div>
              )}
            </div>
          }
          type="info"
          showIcon={false}
          style={{ marginBottom: 16 }}
        />

        {/* Th√¥ng tin ph√≠ thanh to√°n t·ª´ng ph·∫ßn */}
        <Alert
          message="Ph√≠ thanh to√°n t·ª´ng ph·∫ßn"
          description={
            <div>
              <p style={{ marginBottom: 8 }}>
                <strong>Ph√≠ c·ªë ƒë·ªãnh theo s·ªë l·∫ßn thanh to√°n:</strong>
              </p>
              <ul style={{ margin: 0, paddingLeft: 20 }}>
                <li>L·∫ßn 1: <span style={{ color: '#ff4d4f', fontWeight: 'bold' }}>200.000 ‚Ç´</span></li>
                <li>L·∫ßn 2: <span style={{ color: '#ff4d4f', fontWeight: 'bold' }}>500.000 ‚Ç´</span></li>
                <li>L·∫ßn 3+: <span style={{ color: '#ff4d4f', fontWeight: 'bold' }}>1.000.000 ‚Ç´</span></li>
              </ul>
              
              <div style={{ 
                marginTop: 12, 
                padding: '12px', 
                backgroundColor: '#fff2f0', 
                border: '1px solid #ffccc7', 
                borderRadius: '6px' 
              }}>
                <p style={{ margin: 0, fontSize: '14px', color: '#cf1322' }}>
                  <strong>Ph√≠ l·∫ßn n√†y:</strong> {formatCurrency(partialPaymentFee)} 
                  {paymentCount > 0 && ` (l·∫ßn thanh to√°n th·ª© ${paymentCount + 1})`}
                  {loadingPaymentCount && ' (ƒëang t·∫£i...)'}
                </p>
                <p style={{ margin: '8px 0 0 0', fontSize: '12px', color: '#666' }}>
                  <em> Ph√≠ n√†y s·∫Ω ƒë∆∞·ª£c t√≠nh b·∫•t k·ªÉ s·ªë ti·ªÅn thanh to√°n (t·ª´ 50% ƒë·∫øn 100%)</em>
                </p>
                {paymentCount === 0 && (
                  <p style={{ margin: '8px 0 0 0', fontSize: '12px', color: '#1890ff' }}>
                    <em> L·∫ßn ƒë·∫ßu: Thanh to√°n t·ª´ 50% ƒë·∫øn 80% s·ªë ti·ªÅn c√≤n n·ª£. T·ª´ l·∫ßn th·ª© 2 c√≥ th·ªÉ thanh to√°n t·ªëi ƒëa 100%.</em>
                  </p>
                )}
              </div>
            </div>
          }
          type="warning"
          showIcon={false}
          style={{ marginBottom: 16 }}
        />

        {/* Th√¥ng tin l√£i su·∫•t qu√° h·∫°n */}
        {monthsOverdue > 0 && (
          <div style={{ marginBottom: 16 }}>
            <Alert
              message="L√£i su·∫•t qu√° h·∫°n"
              description={
                <div>
                  <p style={{ marginBottom: 8 }}>
                    <strong>L√£i su·∫•t qu√° h·∫°n:</strong> 2% m·ªói th√°ng (t·ªëi ƒëa 5% s·ªë ti·ªÅn c√≤n n·ª£)
                  </p>
                  <ul style={{ margin: 0, paddingLeft: 20 }}>
                    <li>S·ªë th√°ng qu√° h·∫°n: <span style={{ color: '#ff4d4f', fontWeight: 'bold' }}>{monthsOverdue} th√°ng</span></li>
                    <li>L√£i su·∫•t l·∫ßn n√†y: <span style={{ color: '#ff4d4f', fontWeight: 'bold' }}>{formatCurrency(overdueInterest)}</span></li>
                  </ul>
                  <div style={{ 
                    marginTop: 12, 
                    padding: '12px', 
                    backgroundColor: '#fff2f0', 
                    border: '1px solid #ffccc7', 
                    borderRadius: '6px' 
                  }}>
                    <p style={{ margin: 0, fontSize: '12px', color: '#cf1322' }}>
                      <em>‚ö†Ô∏è L√£i su·∫•t s·∫Ω ƒë∆∞·ª£c t√≠nh cho s·ªë ti·ªÅn c√≤n l·∫°i sau khi thanh to√°n t·ª´ng ph·∫ßn</em>
                    </p>
                  </div>
                </div>
              }
              type="error"
              showIcon={false}
              style={{ marginBottom: 16 }}
            />
          </div>
        )}

        <Form.Item
          label="S·ªë ti·ªÅn thanh to√°n"
          name="paymentAmount"
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn thanh to√°n' },
            {
              validator: (_, value) => {
                // Ki·ªÉm tra s·ªë ti·ªÅn c√≥ ph·∫£i l√† s·ªë kh√¥ng
                if (value && isNaN(Number(value))) {
                  return Promise.reject('S·ªë ti·ªÅn thanh to√°n ph·∫£i l√† s·ªë');
                }
                if (value && value <= 0) {
                  return Promise.reject('S·ªë ti·ªÅn thanh to√°n ph·∫£i l·ªõn h∆°n 0');
                }
                if (value && value < minPayment) {
                  return Promise.reject(`S·ªë ti·ªÅn thanh to√°n ph·∫£i t·ªëi thi·ªÉu 50% (${formatCurrency(minPayment)})`);
                }
                if (value && value > maxPayment) {
                  const maxMessage = paymentCount === 0 ? "80%" : "100%";
                  return Promise.reject(`S·ªë ti·ªÅn thanh to√°n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ${maxMessage} gi√° tr·ªã h√≥a ƒë∆°n (${formatCurrency(maxPayment)})`);
                }
                return Promise.resolve();
              }
            }
          ]}
          style={{ marginBottom: '16px' }}
        >
          <InputNumber
            style={{ width: '100%' }}
            placeholder={`T·ª´ ${formatCurrency(minPayment)} ƒë·∫øn ${formatCurrency(maxPayment)}`}
            min={0}
            precision={2}
            formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
            parser={(value) => value.replace(/\$\s?|(,*)/g, '')}
            onChange={handleAmountChange}
            addonAfter={
              <Space>
                <Button
                  type="default"
                  size="small"
                  onClick={() => {
                    const minAmount = minPayment;
                    form.setFieldsValue({ paymentAmount: minAmount });
                    handleAmountChange(minAmount);
                  }}
                >
                  50%
                </Button>
                <Button
                  type="default"
                  size="small"
                  onClick={() => {
                    form.setFieldsValue({ paymentAmount: maxPayment });
                    handleAmountChange(maxPayment);
                  }}
                >
                  {paymentCount === 0 ? '80%' : 'T·ªëi ƒëa'}
                </Button>
              </Space>
            }
          />
        </Form.Item>

        <Alert
          message={`T·ªïng c·ªông: ${totalWithFees.toLocaleString()} ‚Ç´`}
          description={
            <div>
              <Text>S·ªë ti·ªÅn g·ªëc: {paymentAmount.toLocaleString()} ‚Ç´</Text><br />
              <Text>Ph√≠ thanh to√°n: {partialPaymentFee.toLocaleString()} ‚Ç´</Text><br />
              <Text>L√£i su·∫•t: {overdueInterest.toLocaleString()} ‚Ç´</Text>
            </div>
          }
          type="success"
          showIcon
          style={{ marginBottom: 16 }}
        />



        <Alert
          message="L∆∞u √Ω"
          description="Sau khi x√°c nh·∫≠n, b·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPAY ƒë·ªÉ ho√†n t·∫•t thanh to√°n."
          type="info"
          showIcon
          style={{ marginBottom: 16 }}
        />

        <Form.Item>
          <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
            <Button onClick={onCancel}>
              H·ªßy
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              disabled={!canMakePartialPayment()}
            >
              {!canMakePartialPayment() 
                ? `ƒê·ª£i th√™m ${getRemainingDays()} ng√†y n·ªØa` 
                : 'Thanh to√°n qua VNPAY'
              }
            </Button>
          </Space>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default PartialPaymentModal;

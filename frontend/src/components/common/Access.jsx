// Import useSelector ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Redux store
import { useSelector } from "react-redux";

// Component Access: ki·ªÉm so√°t quy·ªÅn truy c·∫≠p v√†o ph·∫ßn giao di·ªán con (children)
export default function Access({ children, requiredPermissions = [] }) {
  // L·∫•y th√¥ng tin user (bao g·ªìm permission) t·ª´ Redux store
  const user = useSelector((state) => state.account.user);

  // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ bi·∫øt c√≥ b·∫≠t ki·ªÉm tra quy·ªÅn kh√¥ng (ACL: Access Control List)
  const aclEnabled = import.meta.env.VITE_ACL_ENABLE === "true";

  // N·∫øu kh√¥ng b·∫≠t ki·ªÉm so√°t quy·ªÅn, cho ph√©p hi·ªÉn th·ªã m·ªçi th·ª©
  if (!aclEnabled) return children;

  // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥ng c√≥ danh s√°ch permission ‚Üí kh√¥ng hi·ªÉn th·ªã g√¨
  if (!user || !user.permissions) return null;

  console.log("üîç [Access Debug] requiredPermissions:", requiredPermissions);
  console.log("üîç [Access Debug] user.permissions:", user?.permissions);
  // Ki·ªÉm tra xem user c√≥ ƒë·∫ßy ƒë·ªß c√°c quy·ªÅn y√™u c·∫ßu kh√¥ng
  const hasPermission = requiredPermissions.every((perm) =>
    user.permissions.some((p) => {
      // N·∫øu l√† string: so s√°nh tr·ª±c ti·∫øp
      if (typeof p === "string") return p === perm;
      // N·∫øu l√† object: so s√°nh theo name
      return p?.name === perm;
    })
  );

  // N·∫øu c√≥ ƒë·ªß quy·ªÅn th√¨ hi·ªÉn th·ªã children, ng∆∞·ª£c l·∫°i ·∫©n ƒëi
  return hasPermission ? children : null;
}

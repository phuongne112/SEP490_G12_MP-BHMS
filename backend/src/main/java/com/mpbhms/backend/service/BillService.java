package com.mpbhms.backend.service;

import com.mpbhms.backend.dto.BillResponse;
import com.mpbhms.backend.entity.Bill;
import com.mpbhms.backend.enums.BillType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import com.mpbhms.backend.dto.BillDetailResponse;
import java.time.LocalDate;
import java.util.List;
import java.math.BigDecimal;
import com.mpbhms.backend.dto.RevenueMonthDTO;

public interface BillService {
    // T·∫°o bill b·∫•t k·ª≥ theo fromDate/toDate
    Bill generateBill(Long contractId, LocalDate fromDate, LocalDate toDate, BillType billType);

    // T·∫°o bill ƒë·∫ßu ti√™n theo h·ª£p ƒë·ªìng (t·ª± t√≠nh chu k·ª≥ t·ª´ ContractStartDate)
    Bill generateFirstBill(Long contractId);

    Page<Bill> getBillsByContractOrRoom(Long contractId, Long roomId, Pageable pageable);
    Bill getBillById(Long billId);

    // Convert Bill to BillResponse v·ªõi transaction
    @org.springframework.transaction.annotation.Transactional
    BillResponse toResponse(Bill bill);

    List<BillDetailResponse> calculateServiceBill(Long roomId, int month, int year);

    BillResponse createAndSaveServiceBill(Long roomId, int month, int year);

    void deleteBillById(Long id);

    Page<Bill> filterBills(Long roomId, Boolean status, BigDecimal minPrice, BigDecimal maxPrice, String search, Pageable pageable);

    BillResponse createCustomBill(Long roomId, String name, String description, java.math.BigDecimal amount, java.time.Instant fromDate, java.time.Instant toDate);

    byte[] generateBillPdf(Long billId);

    Page<Bill> getBillsByUserId(Long userId, Pageable pageable);

    long countUnpaid();
    long countPaid();
    long countOverdue();
    java.math.BigDecimal getTotalRevenue();
    java.util.List<com.mpbhms.backend.dto.RevenueMonthDTO> getRevenueByMonth(int months);
    java.math.BigDecimal getMonthRevenue(String month);
  
    // T·∫°o h√≥a ƒë∆°n t·ª± ƒë·ªông h√†ng lo·∫°t cho t·∫•t c·∫£ ph√≤ng
    List<BillResponse> bulkGenerateBills();

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n h√≥a ƒë∆°n
    BillResponse updatePaymentStatus(Long billId, Boolean status);

    // X·ª≠ l√Ω ph·∫°t qu√° h·∫°n
    BillResponse createLatePenaltyBill(Long originalBillId);
    
    // Ki·ªÉm tra v√† t·∫°o ph·∫°t qu√° h·∫°n t·ª± ƒë·ªông
    List<BillResponse> checkAndCreateLatePenalties();
    
    // T√≠nh to√°n ph·∫°t qu√° h·∫°n
    java.math.BigDecimal calculateLatePenalty(java.math.BigDecimal originalAmount, int overdueDays);
    
    // L·∫•y danh s√°ch h√≥a ƒë∆°n qu√° h·∫°n
    List<Bill> getOverdueBills();
    
    // G·ª≠i th√¥ng b√°o c·∫£nh b√°o h√≥a ƒë∆°n qu√° h·∫°n
    void sendOverdueWarningNotification(Bill bill);
    
    // üÜï G·ª≠i c·∫£nh b√°o cho h√≥a ƒë∆°n qu√° h·∫°n 7 ng√†y
    void sendOverdueWarningFor7Days();
    
    // L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n ph·∫°t
    List<Bill> getAllPenaltyBills();
    
    // T√≠nh s·ªë ng√†y qu√° h·∫°n
    int calculateOverdueDays(Bill bill);
    
    // T·∫°o n·ªôi dung email h√≥a ƒë∆°n th√¥ng th∆∞·ªùng
    String buildNormalBillEmailContent(Bill bill, String paymentUrl);
}

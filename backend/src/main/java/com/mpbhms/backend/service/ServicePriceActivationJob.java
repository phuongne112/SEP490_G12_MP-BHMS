package com.mpbhms.backend.service;

import com.mpbhms.backend.dto.NotificationDTO;
import com.mpbhms.backend.entity.Contract;
import com.mpbhms.backend.entity.CustomService;
import com.mpbhms.backend.entity.RoomUser;
import com.mpbhms.backend.entity.ServicePriceHistory;
import com.mpbhms.backend.entity.User;
import com.mpbhms.backend.enums.ContractStatus;
import com.mpbhms.backend.enums.NotificationType;
import com.mpbhms.backend.repository.ContractRepository;
import com.mpbhms.backend.repository.ServicePriceHistoryRepository;
import com.mpbhms.backend.repository.ServiceRepository;
import com.mpbhms.backend.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

@Service
@RequiredArgsConstructor
@Slf4j
public class ServicePriceActivationJob {

    private final ServicePriceHistoryRepository servicePriceHistoryRepository;
    private final ServiceRepository serviceRepository;
    private final ContractRepository contractRepository;
    private final UserRepository userRepository;
    private final NotificationService notificationService;

    /**
     * Job ch·∫°y h√†ng ng√†y l√∫c 00:01 ƒë·ªÉ k√≠ch ho·∫°t gi√° d·ªãch v·ª• m·ªõi
     * Khi ƒë·∫øn ng√†y hi·ªáu l·ª±c, gi√° m·ªõi s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng v√† gi√° c≈© s·∫Ω b·ªã v√¥ hi·ªáu h√≥a
     */
    @Scheduled(cron = "0 1 0 * * ?") // Ch·∫°y l√∫c 00:01 h√†ng ng√†y
    @Transactional
    public void activateServicePrices() {
        log.info("B·∫Øt ƒë·∫ßu job k√≠ch ho·∫°t gi√° d·ªãch v·ª• m·ªõi...");
        
        LocalDate today = LocalDate.now();
        
        // T√¨m t·∫•t c·∫£ l·ªãch s·ª≠ gi√° c√≥ ng√†y hi·ªáu l·ª±c l√† h√¥m nay v√† ch∆∞a active
        List<ServicePriceHistory> pendingPrices = servicePriceHistoryRepository
                .findByEffectiveDateAndIsActiveFalse(today);
        
        log.info("T√¨m th·∫•y {} gi√° d·ªãch v·ª• c·∫ßn k√≠ch ho·∫°t", pendingPrices.size());
        
        for (ServicePriceHistory priceHistory : pendingPrices) {
            try {
                activateServicePrice(priceHistory);
                log.info("ƒê√£ k√≠ch ho·∫°t gi√° m·ªõi cho d·ªãch v·ª•: {}", priceHistory.getService().getServiceName());
            } catch (Exception e) {
                log.error("L·ªói khi k√≠ch ho·∫°t gi√° cho d·ªãch v·ª• {}: {}", 
                    priceHistory.getService().getServiceName(), e.getMessage());
            }
        }
        
        log.info("Ho√†n th√†nh job k√≠ch ho·∫°t gi√° d·ªãch v·ª• m·ªõi");
    }
    
    /**
     * K√≠ch ho·∫°t gi√° d·ªãch v·ª• m·ªõi
     */
    private void activateServicePrice(ServicePriceHistory newPrice) {
        CustomService service = newPrice.getService();
        
        // 1. V√¥ hi·ªáu h√≥a gi√° c≈© ƒëang active
        List<ServicePriceHistory> activePrices = servicePriceHistoryRepository
                .findByServiceIdAndIsActiveTrue(service.getId());
        
        for (ServicePriceHistory activePrice : activePrices) {
            activePrice.setIsActive(false);
            activePrice.setEndDate(newPrice.getEffectiveDate().minusDays(1));
            servicePriceHistoryRepository.save(activePrice);
        }
        
        // 2. K√≠ch ho·∫°t gi√° m·ªõi
        newPrice.setIsActive(true);
        servicePriceHistoryRepository.save(newPrice);
        
        // 3. C·∫≠p nh·∫≠t gi√° hi·ªán t·∫°i c·ªßa service
        service.setUnitPrice(newPrice.getUnitPrice());
        serviceRepository.save(service);
        
        // 4. G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi thu√™ v·ªÅ vi·ªác thay ƒë·ªïi gi√° d·ªãch v·ª•
        sendServicePriceChangeNotification(service, newPrice);
    }
    
    /**
     * G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi thu√™ v√† ch·ªß tr·ªç v·ªÅ vi·ªác thay ƒë·ªïi gi√° d·ªãch v·ª•
     * (KH√îNG c·∫ßn ki·ªÉm tra h·ª£p ƒë·ªìng active)
     */
    private void sendServicePriceChangeNotification(CustomService service, ServicePriceHistory newPrice) {
        try {
            // üÜï G·ª≠i th√¥ng b√°o cho T·∫§T C·∫¢ landlords (kh√¥ng c·∫ßn ki·ªÉm tra h·ª£p ƒë·ªìng)
            List<User> allLandlords = userRepository.findAll().stream()
                .filter(user -> user.getRole() != null && "LANDLORD".equals(user.getRole().getRoleName()))
                .toList();
            for (User landlord : allLandlords) {
                try {
                    NotificationDTO landlordNotification = new NotificationDTO();
                    landlordNotification.setRecipientId(landlord.getId());
                    landlordNotification.setTitle("C·∫≠p nh·∫≠t gi√° d·ªãch v·ª• th√†nh c√¥ng: " + service.getServiceName());
                    landlordNotification.setMessage(String.format(
                        "Gi√° d·ªãch v·ª• %s ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh %s VNƒê/%s t·ª´ ng√†y %s. " +
                        "L√Ω do: %s",
                        service.getServiceName(),
                        newPrice.getUnitPrice().toString(),
                        service.getUnit(),
                        newPrice.getEffectiveDate().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                        newPrice.getReason() != null ? newPrice.getReason() : "Kh√¥ng c√≥ l√Ω do"
                    ));
                    landlordNotification.setType(NotificationType.SERVICE_UPDATE);
                    landlordNotification.setMetadata(String.format(
                        "{\"serviceId\":%d,\"serviceName\":\"%s\",\"newPrice\":%s,\"effectiveDate\":\"%s\"}",
                        service.getId(),
                        service.getServiceName(),
                        newPrice.getUnitPrice().toString(),
                        newPrice.getEffectiveDate().toString()
                    ));
                    
                    notificationService.createAndSend(landlordNotification);
                    log.info("ƒê√£ g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t gi√° d·ªãch v·ª• cho landlord: {}", landlord.getId());
                } catch (Exception e) {
                    log.error("L·ªói g·ª≠i th√¥ng b√°o thay ƒë·ªïi gi√° d·ªãch v·ª• cho landlord {}: {}", 
                        landlord.getId(), e.getMessage());
                }
            }
            
            // üÜï G·ª≠i th√¥ng b√°o cho T·∫§T C·∫¢ renters (kh√¥ng c·∫ßn ki·ªÉm tra h·ª£p ƒë·ªìng)
            List<User> allRenters = userRepository.findAll().stream()
                .filter(user -> user.getRole() != null && "RENTER".equals(user.getRole().getRoleName()))
                .toList();
            for (User renter : allRenters) {
                try {
                    NotificationDTO notification = new NotificationDTO();
                    notification.setRecipientId(renter.getId());
                    notification.setTitle("Thay ƒë·ªïi gi√° d·ªãch v·ª•: " + service.getServiceName());
                    notification.setMessage(String.format(
                        "Gi√° d·ªãch v·ª• %s ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh %s VNƒê/%s t·ª´ ng√†y %s. " +
                        "L√Ω do: %s",
                        service.getServiceName(),
                        newPrice.getUnitPrice().toString(),
                        service.getUnit(),
                        newPrice.getEffectiveDate().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                        newPrice.getReason() != null ? newPrice.getReason() : "Kh√¥ng c√≥ l√Ω do"
                    ));
                    notification.setType(NotificationType.SERVICE_UPDATE);
                    notification.setMetadata(String.format(
                        "{\"serviceId\":%d,\"serviceName\":\"%s\",\"newPrice\":%s,\"effectiveDate\":\"%s\"}",
                        service.getId(),
                        service.getServiceName(),
                        newPrice.getUnitPrice().toString(),
                        newPrice.getEffectiveDate().toString()
                    ));
                    
                    notificationService.createAndSend(notification);
                    log.info("ƒê√£ g·ª≠i th√¥ng b√°o thay ƒë·ªïi gi√° d·ªãch v·ª• cho renter: {}", renter.getId());
                } catch (Exception e) {
                    log.error("L·ªói g·ª≠i th√¥ng b√°o thay ƒë·ªïi gi√° d·ªãch v·ª• cho renter {}: {}", 
                        renter.getId(), e.getMessage());
                }
            }
        } catch (Exception e) {
            log.error("L·ªói khi g·ª≠i th√¥ng b√°o thay ƒë·ªïi gi√° d·ªãch v·ª•: {}", e.getMessage());
        }
    }
} 
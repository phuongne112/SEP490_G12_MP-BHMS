package com.mpbhms.backend.service.impl;

import com.mpbhms.backend.dto.BillDetailResponse;
import com.mpbhms.backend.dto.BillResponse;
import com.mpbhms.backend.entity.*;
import com.mpbhms.backend.enums.BillItemType;
import com.mpbhms.backend.enums.BillType;
import com.mpbhms.backend.enums.ContractStatus;
import com.mpbhms.backend.enums.PaymentCycle;
import com.mpbhms.backend.enums.ServiceType;
import com.mpbhms.backend.exception.BusinessException;
import com.mpbhms.backend.exception.NotFoundException;
import com.mpbhms.backend.repository.BillRepository;
import com.mpbhms.backend.repository.ContractRepository;
import com.mpbhms.backend.repository.ServiceReadingRepository;
import com.mpbhms.backend.repository.ServiceRepository;
import com.mpbhms.backend.repository.RoomRepository;
import com.mpbhms.backend.service.BillService;
import com.mpbhms.backend.dto.NotificationDTO;
import com.mpbhms.backend.enums.NotificationType;
import com.mpbhms.backend.service.NotificationService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import java.io.ByteArrayOutputStream;
import com.lowagie.text.pdf.BaseFont;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.time.format.DateTimeFormatter;
import java.text.NumberFormat;
import java.util.Locale;
import com.lowagie.text.FontFactory;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfWriter;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class BillServiceImpl implements BillService {

    private final BillRepository billRepository;
    private final ContractRepository contractRepository;
    private final ServiceReadingRepository serviceReadingRepository;
    private final ServiceRepository serviceRepository;
    private final RoomRepository roomRepository;
    private final NotificationService notificationService;

    @Override
    public Bill generateFirstBill(Long contractId) {
        Contract contract = contractRepository.findById(contractId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng"));

        Room room = contract.getRoom();
        PaymentCycle cycle = contract.getPaymentCycle();
        LocalDate startDate = contract.getContractStartDate()
                .atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate fromDate = startDate;
        LocalDate toDate = calculateEndDate(startDate, cycle);

        return generateBillInternal(contract, fromDate, toDate, BillType.CONTRACT_INIT);
    }

    private Bill generateBillInternal(Contract contract, LocalDate fromDate, LocalDate toDate, BillType billType) {
        Room room = contract.getRoom();
        PaymentCycle cycle = contract.getPaymentCycle();

        // Ki·ªÉm tra fromDate/toDate h·ª£p l·ªá v·ªõi paymentCycle
        int expectedMonths;
        switch (cycle) {
            case MONTHLY:
                expectedMonths = 1;
                break;
            case QUARTERLY:
                expectedMonths = 3;
                break;
            case YEARLY:
                expectedMonths = 12;
                break;
            default:
                throw new IllegalArgumentException("Chu k·ª≥ thanh to√°n kh√¥ng h·ª£p l·ªá: " + cycle);
        }
        LocalDate expectedToDate = fromDate.plusMonths(expectedMonths).minusDays(1);
        if (!toDate.equals(expectedToDate)) {
            throw new BusinessException("Ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c h√≥a ƒë∆°n kh√¥ng h·ª£p l·ªá v·ªõi chu k·ª≥ thanh to√°n " + cycle + ". K·ª≥ ƒë√∫ng ph·∫£i t·ª´ " + fromDate + " ƒë·∫øn " + expectedToDate);
        }

        List<BillDetail> details = new ArrayList<>();
        BigDecimal totalAmount = BigDecimal.ZERO;

        // 1. Ti·ªÅn ƒë·∫∑t c·ªçc n·∫øu l√† h√≥a ƒë∆°n kh·ªüi t·∫°o h·ª£p ƒë·ªìng
        if (billType == BillType.CONTRACT_INIT && contract.getDepositAmount() != null) {
            BillDetail depositDetail = new BillDetail();
            depositDetail.setItemType(BillItemType.DEPOSIT);
            depositDetail.setDescription("Ti·ªÅn ƒë·∫∑t c·ªçc h·ª£p ƒë·ªìng");
            depositDetail.setItemAmount(contract.getDepositAmount());
            depositDetail.setCreatedDate(Instant.now());
            details.add(depositDetail);
            totalAmount = totalAmount.add(contract.getDepositAmount());
        }

        // 2. Ti·ªÅn thu√™ ph√≤ng
        int months = countMonths(cycle);
        BigDecimal rent = BigDecimal.valueOf(room.getPricePerMonth())
                .multiply(BigDecimal.valueOf(months));
        BillDetail rentDetail = new BillDetail();
        rentDetail.setItemType(BillItemType.ROOM_RENT);
        rentDetail.setDescription("Ti·ªÅn ph√≤ng t·ª´ " + fromDate + " ƒë·∫øn " + toDate);
        rentDetail.setItemAmount(rent);
        rentDetail.setCreatedDate(Instant.now());
        details.add(rentDetail);
        totalAmount = totalAmount.add(rent);

        // 3. Convert fromDate/toDate sang Instant
        ZoneId vnZone = ZoneId.of("Asia/Ho_Chi_Minh");
        Instant fromInstant = fromDate.atStartOfDay(vnZone).toInstant();
        Instant toInstant = toDate.atTime(23, 59).atZone(vnZone).toInstant();

        // 4. D·ªãch v·ª• c·ªßa ph√≤ng (ch·ªâ l·∫•y d·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông trong k·ª≥ n√†y)
        List<CustomService> services = room.getServiceMappings().stream()
            .filter(mapping -> Boolean.TRUE.equals(mapping.getIsActive()) ||
                (mapping.getEndDate() == null || !mapping.getEndDate().isBefore(toDate)))
            .map(RoomServiceMapping::getService)
            .collect(Collectors.toList());
        for (CustomService service : services) {
            if (service.getServiceType() == ServiceType.ELECTRICITY) {
                // ƒêi·ªán: t√≠nh theo ch·ªâ s·ªë
                List<ServiceReading> readings = serviceReadingRepository.findByRoomAndServiceAndDateRange(
                        room.getId(), service, fromInstant, toInstant);
                BigDecimal totalConsumed = BigDecimal.ZERO;
                for (ServiceReading reading : readings) {
                    if (reading.getNewReading() != null && reading.getOldReading() != null) {
                        BigDecimal consumed = reading.getNewReading().subtract(reading.getOldReading());
                        if (consumed.compareTo(BigDecimal.ZERO) > 0) {
                            totalConsumed = totalConsumed.add(consumed);
                        }
                    }
                }
                if (totalConsumed.compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal amount = service.getUnitPrice().multiply(totalConsumed);
                    BillDetail serviceDetail = new BillDetail();
                    serviceDetail.setItemType(BillItemType.SERVICE);
                    serviceDetail.setDescription("D·ªãch v·ª• " + service.getServiceName() + " (" + service.getServiceType() + ") t·ª´ " + fromDate + " ƒë·∫øn " + toDate);
                    serviceDetail.setService(service);
                    serviceDetail.setUnitPriceAtBill(service.getUnitPrice());
                    serviceDetail.setConsumedUnits(totalConsumed);
                    serviceDetail.setItemAmount(amount);
                    serviceDetail.setCreatedDate(Instant.now());
                    details.add(serviceDetail);
                    totalAmount = totalAmount.add(amount);
                }
            } else if (service.getServiceType() == ServiceType.WATER || service.getServiceType() == ServiceType.OTHER) {
                // N∆∞·ªõc & d·ªãch v·ª• kh√°c: t√≠nh c·ªë ƒë·ªãnh
                BillDetail fixedDetail = new BillDetail();
                fixedDetail.setItemType(BillItemType.SERVICE);
                fixedDetail.setDescription("D·ªãch v·ª• c·ªë ƒë·ªãnh: " + service.getServiceName() + " t·ª´ " + fromDate + " ƒë·∫øn " + toDate);
                fixedDetail.setService(service);
                fixedDetail.setUnitPriceAtBill(service.getUnitPrice());
                fixedDetail.setItemAmount(service.getUnitPrice());
                fixedDetail.setCreatedDate(Instant.now());
                details.add(fixedDetail);
                totalAmount = totalAmount.add(service.getUnitPrice());
            }
        }

        // 5. T·∫°o Bill
        Bill bill = new Bill();
        bill.setContract(contract);
        bill.setRoom(room);
        bill.setFromDate(fromInstant);
        bill.setToDate(toInstant);
        bill.setPaymentCycle(cycle);
        // N·∫øu billType l√† CONTRACT_TOTAL nh∆∞ng kh√¥ng c√≥ d√≤ng ti·ªÅn ph√≤ng, th√¨ chuy·ªÉn th√†nh SERVICE
        boolean hasRoomRent = details.stream().anyMatch(d -> d.getItemType() == BillItemType.ROOM_RENT);
        if (billType == BillType.CONTRACT_TOTAL && !hasRoomRent) {
            bill.setBillType(BillType.SERVICE);
        } else {
            bill.setBillType(billType);
        }
        bill.setBillDate(Instant.now());
        bill.setTotalAmount(totalAmount);
        bill.setStatus(false);
        bill.setBillDetails(details);

        for (BillDetail detail : details) {
            detail.setBill(bill);
        }

        billRepository.save(bill);
        sendBillNotificationToAllUsers(bill);
        return bill;
    }

    @Override
    public Bill generateBill(Long contractId, LocalDate fromDate, LocalDate toDate, BillType billType) {
        System.out.println(String.format(
            "\nüèÅ GENERATE BILL REQUEST:\n" +
            "Contract ID: %d\n" +
            "From Date: %s\n" +
            "To Date: %s\n" +
            "Bill Type: %s\n" +
            "================================",
            contractId, fromDate, toDate, billType
        ));
        
        Contract contract = contractRepository.findById(contractId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng"));
        Room room = contract.getRoom();
        PaymentCycle cycle = contract.getPaymentCycle();

        // L·∫•y ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c h·ª£p ƒë·ªìng
        LocalDate contractStart = contract.getContractStartDate().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate contractEnd = contract.getContractEndDate().atZone(ZoneId.systemDefault()).toLocalDate();
        // Ki·ªÉm tra fromDate/toDate ph·∫£i n·∫±m trong kho·∫£ng h·ª£p ƒë·ªìng
        if (fromDate.isBefore(contractStart) || toDate.isAfter(contractEnd)) {
            throw new BusinessException("Ng√†y h√≥a ƒë∆°n ph·∫£i n·∫±m trong th·ªùi h·∫°n h·ª£p ƒë·ªìng: " + contractStart + " ƒë·∫øn " + contractEnd);
        }

        // Ki·ªÉm tra null
        if (fromDate == null || toDate == null) {
            throw new BusinessException("Vui l√≤ng nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c!");
        }
        if (fromDate.isAfter(toDate)) {
            throw new BusinessException("Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ho·∫∑c b·∫±ng ng√†y k·∫øt th√∫c!");
        }
        
        int expectedMonths;
        switch (cycle) {
            case MONTHLY:
                expectedMonths = 1;
                break;
            case QUARTERLY:
                expectedMonths = 3;
                break;
            case YEARLY:
                expectedMonths = 12;
                break;
            default:
                throw new IllegalArgumentException("Chu k·ª≥ thanh to√°n kh√¥ng h·ª£p l·ªá: " + cycle);
        }

        // Ph√¢n bi·ªát validation gi·ªØa chu k·ª≥ chu·∫©n v√† t√πy ch·ªçn
        boolean isCustomPeriod = isCustomDateRange(fromDate, toDate, contractStart, expectedMonths);
        System.out.println("üîç DETECTION RESULT: isCustomPeriod = " + isCustomPeriod);
        
        if (!isCustomPeriod) {
            // Logic c·ª©ng cho chu k·ª≥ chu·∫©n - gi·ªØ nguy√™n ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
            // Ki·ªÉm tra fromDate ph·∫£i l√† ng√†y b·∫Øt ƒë·∫ßu h·ª£p ƒë·ªìng ho·∫∑c l√† ng√†y ƒë·∫ßu k·ª≥ ti·∫øp theo
            if (!fromDate.equals(contractStart)) {
                // T√≠nh s·ªë th√°ng gi·ªØa contractStart v√† fromDate
                int monthsBetween = (fromDate.getYear() - contractStart.getYear()) * 12 + (fromDate.getMonthValue() - contractStart.getMonthValue());
                int cycleMonths = expectedMonths;
                if (monthsBetween % cycleMonths != 0 || fromDate.isBefore(contractStart)) {
                    throw new BusinessException("Ng√†y b·∫Øt ƒë·∫ßu h√≥a ƒë∆°n ph·∫£i l√† ng√†y b·∫Øt ƒë·∫ßu h·ª£p ƒë·ªìng ho·∫∑c ng√†y ƒë·∫ßu ti√™n c·ªßa m·ªôt chu k·ª≥ h·ª£p l·ªá sau ng√†y b·∫Øt ƒë·∫ßu h·ª£p ƒë·ªìng. fromDate kh√¥ng h·ª£p l·ªá: " + fromDate);
                }
            }
            // Ki·ªÉm tra fromDate/toDate h·ª£p l·ªá v·ªõi paymentCycle
            LocalDate expectedToDate = fromDate.plusMonths(expectedMonths).minusDays(1);
            if (!toDate.equals(expectedToDate)) {
                throw new BusinessException("Chu k·ª≥ h√≥a ƒë∆°n kh√¥ng h·ª£p l·ªá v·ªõi h·ª£p ƒë·ªìng! Chu k·ª≥ trong h·ª£p ƒë·ªìng l√† " + cycle + ". K·ª≥ ƒë√∫ng ph·∫£i t·ª´ " + fromDate + " ƒë·∫øn " + expectedToDate);
            }
        } else {
            // Logic linh ho·∫°t cho kho·∫£ng ng√†y t√πy ch·ªçn
            validateCustomDateRange(fromDate, toDate, cycle);
        }
        // Ki·ªÉm tra chu k·ª≥ truy·ªÅn v√†o c√≥ kh·ªõp v·ªõi h·ª£p ƒë·ªìng kh√¥ng
        if (billType == BillType.CONTRACT_TOTAL && contract.getPaymentCycle() != cycle) {
            throw new BusinessException("Chu k·ª≥ t√≠nh h√≥a ƒë∆°n kh√¥ng kh·ªõp v·ªõi chu k·ª≥ trong h·ª£p ƒë·ªìng! Ch·ªâ ƒë∆∞·ª£c t·∫°o h√≥a ƒë∆°n theo ƒë√∫ng chu k·ª≥ h·ª£p ƒë·ªìng: " + cycle);
        }

        List<BillDetail> details = new ArrayList<>();
        BigDecimal totalAmount = BigDecimal.ZERO;

        // T√≠nh s·ªë th√°ng d·ª±a tr√™n kho·∫£ng ng√†y th·ª±c t·∫ø thay v√¨ chu k·ª≥ h·ª£p ƒë·ªìng
        int months;
        if (isCustomPeriod) {
            // V·ªõi kho·∫£ng ng√†y t√πy ch·ªçn, t√≠nh d·ª±a tr√™n kho·∫£ng ng√†y th·ª±c t·∫ø
            long daysBetween = ChronoUnit.DAYS.between(fromDate, toDate) + 1;
            months = Math.max(1, (int) Math.round(daysBetween / 30.0)); // √çt nh·∫•t 1 th√°ng
            System.out.println(String.format(
                "‚úÖ CUSTOM BILLING: %s to %s (%d days) -> %d months (Price: %,.0f √ó %d = %,.0f VND)",
                fromDate, toDate, daysBetween, months, 
                room.getPricePerMonth(), months, room.getPricePerMonth() * months
            ));
        } else {
            // V·ªõi chu k·ª≥ chu·∫©n, d√πng logic c≈©
            months = countMonths(cycle);
            System.out.println(String.format(
                "‚úÖ STANDARD BILLING: %s cycle -> %d months (Price: %,.0f √ó %d = %,.0f VND)", 
                cycle, months, room.getPricePerMonth(), months, room.getPricePerMonth() * months
            ));
        }
        BigDecimal rent = BigDecimal.valueOf(room.getPricePerMonth()).multiply(BigDecimal.valueOf(months));

        if (billType == BillType.CONTRACT_ROOM_RENT) {
            // Ch·ªâ t·∫°o d√≤ng ti·ªÅn ph√≤ng
            BillDetail rentDetail = new BillDetail();
            rentDetail.setItemType(BillItemType.ROOM_RENT);
            rentDetail.setDescription("Ti·ªÅn ph√≤ng t·ª´ " + fromDate + " ƒë·∫øn " + toDate);
            rentDetail.setItemAmount(rent);
            rentDetail.setCreatedDate(Instant.now());
            details.add(rentDetail);
            totalAmount = totalAmount.add(rent);
        } else if (billType == BillType.CONTRACT_TOTAL) {
            // T·ªïng h·ª£p: ti·ªÅn ph√≤ng + d·ªãch v·ª•
            BillDetail rentDetail = new BillDetail();
            rentDetail.setItemType(BillItemType.ROOM_RENT);
            rentDetail.setDescription("Ti·ªÅn ph√≤ng t·ª´ " + fromDate + " ƒë·∫øn " + toDate);
            rentDetail.setItemAmount(rent);
            rentDetail.setCreatedDate(Instant.now());
            details.add(rentDetail);
            totalAmount = totalAmount.add(rent);

            // Convert fromDate/toDate sang Instant
            ZoneId vnZone = ZoneId.of("Asia/Ho_Chi_Minh");
            Instant fromInstant = fromDate.atStartOfDay(vnZone).toInstant();
            Instant toInstant = toDate.atTime(23, 59).atZone(vnZone).toInstant();

            // L·∫•y d·ªãch v·ª• active
            List<CustomService> services = room.getServiceMappings().stream()
                .filter(mapping -> Boolean.TRUE.equals(mapping.getIsActive()) ||
                    (mapping.getEndDate() == null || !mapping.getEndDate().isBefore(toDate)))
                .map(RoomServiceMapping::getService)
                .collect(Collectors.toList());
            for (CustomService service : services) {
                if (service.getServiceType() == ServiceType.ELECTRICITY) {
                    List<ServiceReading> readings = serviceReadingRepository.findByRoomAndServiceAndDateRange(
                            room.getId(), service, fromInstant, toInstant
                    );
                    BigDecimal totalConsumed = BigDecimal.ZERO;
                    for (ServiceReading reading : readings) {
                        if (reading.getNewReading() != null && reading.getOldReading() != null) {
                            BigDecimal consumed = reading.getNewReading().subtract(reading.getOldReading());
                            if (consumed.compareTo(BigDecimal.ZERO) > 0) {
                                totalConsumed = totalConsumed.add(consumed);
                            }
                        }
                    }
                    if (totalConsumed.compareTo(BigDecimal.ZERO) > 0) {
                        BigDecimal amount = service.getUnitPrice().multiply(totalConsumed);
                        BillDetail serviceDetail = new BillDetail();
                        serviceDetail.setItemType(BillItemType.SERVICE);
                        serviceDetail.setDescription("D·ªãch v·ª• " + service.getServiceName() + " (" + service.getServiceType() + ") t·ª´ " + fromDate + " ƒë·∫øn " + toDate);
                        serviceDetail.setService(service);
                        serviceDetail.setUnitPriceAtBill(service.getUnitPrice());
                        serviceDetail.setConsumedUnits(totalConsumed);
                        serviceDetail.setItemAmount(amount);
                        serviceDetail.setCreatedDate(Instant.now());
                        details.add(serviceDetail);
                        totalAmount = totalAmount.add(amount);
                    }
                } else if (service.getServiceType() == ServiceType.WATER || service.getServiceType() == ServiceType.OTHER) {
                    BillDetail fixedDetail = new BillDetail();
                    fixedDetail.setItemType(BillItemType.SERVICE);
                    fixedDetail.setDescription("D·ªãch v·ª• c·ªë ƒë·ªãnh: " + service.getServiceName() + " t·ª´ " + fromDate + " ƒë·∫øn " + toDate);
                    fixedDetail.setService(service);
                    fixedDetail.setUnitPriceAtBill(service.getUnitPrice());
                    
                    // T√≠nh to√°n ti·ªÅn d·ªãch v·ª• c·ªë ƒë·ªãnh theo t·ª∑ l·ªá th·ªùi gian
                    BigDecimal serviceAmount;
                    if (isCustomPeriod) {
                        // V·ªõi kho·∫£ng ng√†y t√πy ch·ªçn, t√≠nh theo t·ª∑ l·ªá
                        long daysBetween = ChronoUnit.DAYS.between(fromDate, toDate) + 1;
                        double ratio = daysBetween / 30.0; // T·ª∑ l·ªá so v·ªõi 1 th√°ng
                        serviceAmount = service.getUnitPrice().multiply(BigDecimal.valueOf(ratio));
                    } else {
                        // V·ªõi chu k·ª≥ chu·∫©n, t√≠nh theo s·ªë th√°ng chu k·ª≥
                        int cycleMonths = countMonths(cycle);
                        serviceAmount = service.getUnitPrice().multiply(BigDecimal.valueOf(cycleMonths));
                    }
                    
                    fixedDetail.setItemAmount(serviceAmount);
                    fixedDetail.setCreatedDate(Instant.now());
                    details.add(fixedDetail);
                    totalAmount = totalAmount.add(serviceAmount);
                }
            }
        } else {
            // C√°c lo·∫°i bill kh√°c gi·ªØ nguy√™n logic c≈© n·∫øu c√≥
            // ...
        }

        // T·∫°o Bill
        Bill bill = new Bill();
        bill.setContract(contract);
        bill.setRoom(room);
        bill.setFromDate(fromDate.atStartOfDay(ZoneId.of("Asia/Ho_Chi_Minh")).toInstant());
        bill.setToDate(toDate.atTime(23, 59).atZone(ZoneId.of("Asia/Ho_Chi_Minh")).toInstant());
        bill.setPaymentCycle(cycle);
        // N·∫øu billType l√† CONTRACT_TOTAL nh∆∞ng kh√¥ng c√≥ d√≤ng ti·ªÅn ph√≤ng, th√¨ chuy·ªÉn th√†nh SERVICE
        boolean hasRoomRent = details.stream().anyMatch(d -> d.getItemType() == BillItemType.ROOM_RENT);
        if (billType == BillType.CONTRACT_TOTAL && !hasRoomRent) {
            bill.setBillType(BillType.SERVICE);
        } else {
            bill.setBillType(billType);
        }
        bill.setBillDate(Instant.now());
        bill.setTotalAmount(totalAmount);
        bill.setStatus(false);
        bill.setBillDetails(details);
        for (BillDetail detail : details) {
            detail.setBill(bill);
        }
        billRepository.save(bill);
        sendBillNotificationToAllUsers(bill);
        return bill;
    }

    private int countMonths(PaymentCycle cycle) {
        switch (cycle) {
            case MONTHLY:
                return 1;
            case QUARTERLY:
                return 3;
            case YEARLY:
                return 12;
            default:
                throw new IllegalArgumentException("Chu k·ª≥ thanh to√°n kh√¥ng h·ª£p l·ªá: " + cycle);
        }

    }

    private LocalDate calculateEndDate(LocalDate startDate, PaymentCycle cycle) {
        switch (cycle) {
            case MONTHLY:
                return startDate.plusMonths(1).minusDays(1);
            case QUARTERLY:
                return startDate.plusMonths(3).minusDays(1);
            case YEARLY:
                return startDate.plusYears(1).minusDays(1);
            default:
                throw new IllegalArgumentException("Chu k·ª≥ thanh to√°n kh√¥ng h·ª£p l·ªá: " + cycle);
        }
    }

    /**
     * Ki·ªÉm tra xem kho·∫£ng ng√†y c√≥ ph·∫£i l√† t√πy ch·ªçn (kh√¥ng theo chu k·ª≥ chu·∫©n) kh√¥ng
     */
    private boolean isCustomDateRange(LocalDate fromDate, LocalDate toDate, LocalDate contractStart, int expectedMonths) {
        System.out.println(String.format(
            "=== isCustomDateRange Debug ===\n" +
            "fromDate: %s\n" +
            "toDate: %s\n" +
            "contractStart: %s\n" +
            "expectedMonths: %d",
            fromDate, toDate, contractStart, expectedMonths
        ));
        
        // N·∫øu fromDate kh√¥ng ph·∫£i l√† ng√†y b·∫Øt ƒë·∫ßu h·ª£p ƒë·ªìng
        if (!fromDate.equals(contractStart)) {
            System.out.println("fromDate != contractStart, checking months...");
            // T√≠nh s·ªë th√°ng gi·ªØa contractStart v√† fromDate
            int monthsBetween = (fromDate.getYear() - contractStart.getYear()) * 12 + (fromDate.getMonthValue() - contractStart.getMonthValue());
            System.out.println("monthsBetween: " + monthsBetween);
            // N·∫øu kh√¥ng chia h·∫øt cho chu k·ª≥, xem nh∆∞ l√† t√πy ch·ªçn
            if (monthsBetween % expectedMonths != 0) {
                System.out.println("monthsBetween % expectedMonths != 0 -> CUSTOM PERIOD");
                return true;
            }
        }

        // Ki·ªÉm tra toDate c√≥ kh·ªõp v·ªõi logic chu·∫©n kh√¥ng
        LocalDate expectedToDate = fromDate.plusMonths(expectedMonths).minusDays(1);
        boolean isCustom = !toDate.equals(expectedToDate);
        System.out.println(String.format(
            "expectedToDate: %s, actual toDate: %s -> isCustom: %s",
            expectedToDate, toDate, isCustom
        ));
        
        return isCustom;
    }

    /**
     * Validation linh ho·∫°t cho kho·∫£ng ng√†y t√πy ch·ªçn
     */
    private void validateCustomDateRange(LocalDate fromDate, LocalDate toDate, PaymentCycle cycle) {
        // T√≠nh s·ªë th√°ng gi·ªØa hai ng√†y
        long daysBetween = ChronoUnit.DAYS.between(fromDate, toDate) + 1;
        double monthsBetween = daysBetween / 30.0; // ∆Ø·ªõc t√≠nh

        // L·∫•y s·ªë th√°ng ti√™u chu·∫©n theo chu k·ª≥
        int expectedMonths;
        String cycleName;
        switch (cycle) {
            case MONTHLY:
                expectedMonths = 1;
                cycleName = "h√†ng th√°ng";
                break;
            case QUARTERLY:
                expectedMonths = 3;
                cycleName = "h√†ng qu√Ω";
                break;
            case YEARLY:
                expectedMonths = 12;
                cycleName = "h√†ng nƒÉm";
                break;
            default:
                throw new IllegalArgumentException("Chu k·ª≥ thanh to√°n kh√¥ng h·ª£p l·ªá: " + cycle);
        }

        // Ki·ªÉm tra ƒë·ªô ch√™nh l·ªách - cho ph√©p sai s·ªë h·ª£p l√Ω
        double diffFromExpected = Math.abs(monthsBetween - expectedMonths);
        
        // Ch·ªâ t·ª´ ch·ªëi n·∫øu sai l·ªách qu√° l·ªõn (h∆°n 75% chu k·ª≥) ƒë·ªÉ linh ho·∫°t h∆°n
        if (diffFromExpected > expectedMonths * 0.75) {
            throw new BusinessException(
                String.format("Kho·∫£ng ng√†y t√πy ch·ªçn kh√¥ng ph√π h·ª£p v·ªõi chu k·ª≥ thanh to√°n %s. " +
                "D·ª± ki·∫øn: %d th√°ng, th·ª±c t·∫ø: %.1f th√°ng. " +
                "Ch√™nh l·ªách qu√° l·ªõn (%.1f th√°ng), vui l√≤ng ch·ªçn kho·∫£ng ng√†y ph√π h·ª£p h∆°n.",
                cycleName, expectedMonths, monthsBetween, diffFromExpected)
            );
        }
        
        // C·∫£nh b√°o log n·∫øu c√≥ sai l·ªách nh·ªè nh∆∞ng v·∫´n cho ph√©p
        if (diffFromExpected > 0.2) {
            System.out.println(String.format(
                "C·∫£nh b√°o: Kho·∫£ng ng√†y t√πy ch·ªçn c√≥ sai l·ªách v·ªõi chu k·ª≥ %s. " +
                "D·ª± ki·∫øn: %d th√°ng, th·ª±c t·∫ø: %.1f th√°ng",
                cycleName, expectedMonths, monthsBetween
            ));
        }
    }

    @Override
    public Page<Bill> getBillsByContractOrRoom(Long contractId, Long roomId, Pageable pageable) {
        if (contractId != null) {
            return billRepository.findByContractId(contractId, pageable);
        }
        if (roomId != null) {
            return billRepository.findByRoomId(roomId, pageable);
        }
        return billRepository.findAll(pageable);
    }

    @Override
    public Bill getBillById(Long billId) {
        return billRepository.findById(billId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n"));
    }

    @Override
    public BillResponse toResponse(Bill bill) {
        BillResponse response = new BillResponse();
        response.setId(bill.getId());
        response.setContractId(bill.getContract().getId());
        response.setRoomId(bill.getRoom().getId());
        response.setRoomNumber(bill.getRoom().getRoomNumber());
        response.setFromDate(bill.getFromDate());
        response.setToDate(bill.getToDate());
        response.setPaymentCycle(bill.getPaymentCycle());
        response.setBillType(bill.getBillType());
        response.setBillDate(bill.getBillDate());
        response.setDueDate(bill.getDueDate());
        response.setPaidDate(bill.getPaidDate());
        response.setTotalAmount(bill.getTotalAmount());
        response.setStatus(bill.getStatus());

        List<BillDetailResponse> detailResponses = new ArrayList<>();
        for (BillDetail detail : bill.getBillDetails()) {
            BillDetailResponse d = new BillDetailResponse();
            d.setItemType(detail.getItemType());
            d.setDescription(detail.getDescription());
            d.setUnitPriceAtBill(detail.getUnitPriceAtBill());
            d.setConsumedUnits(detail.getConsumedUnits());
            d.setItemAmount(detail.getItemAmount());
            if (detail.getService() != null) {
                d.setServiceName(detail.getService().getServiceName());
            }
            detailResponses.add(d);
        }
        response.setDetails(detailResponses);
        return response;
    }

    @Override
    public List<BillDetailResponse> calculateServiceBill(Long roomId, int month, int year) {
        Room room = roomRepository.findById(roomId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y ph√≤ng"));
        ZoneId vnZone = ZoneId.of("Asia/Ho_Chi_Minh");
        LocalDate monthStart = LocalDate.of(year, month, 1);
        LocalDate monthEnd = monthStart.withDayOfMonth(monthStart.lengthOfMonth());
        Instant fromInstant = monthStart.atStartOfDay(vnZone).toInstant();
        Instant toInstant = monthEnd.atTime(23, 59).atZone(vnZone).toInstant();
        List<BillDetailResponse> result = new ArrayList<>();
        List<CustomService> services = room.getServiceMappings().stream()
            .filter(mapping -> Boolean.TRUE.equals(mapping.getIsActive()) ||
                (mapping.getEndDate() == null || !mapping.getEndDate().isBefore(monthEnd)))
            .map(RoomServiceMapping::getService)
            .collect(Collectors.toList());
        for (CustomService service : services) {
            if (service.getServiceType() == ServiceType.ELECTRICITY) {
                List<ServiceReading> readings = serviceReadingRepository.findByRoomAndServiceAndDateRange(
                        room.getId(), service, fromInstant, toInstant
                );
                BigDecimal totalConsumed = BigDecimal.ZERO;
                for (ServiceReading reading : readings) {
                    if (reading.getNewReading() != null && reading.getOldReading() != null) {
                        BigDecimal consumed = reading.getNewReading().subtract(reading.getOldReading());
                        if (consumed.compareTo(BigDecimal.ZERO) > 0) {
                            totalConsumed = totalConsumed.add(consumed);
                        }
                    }
                }
                if (totalConsumed.compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal amount = service.getUnitPrice().multiply(totalConsumed);
                    BillDetailResponse detail = new BillDetailResponse();
                    detail.setItemType(BillItemType.SERVICE);
                    detail.setDescription("D·ªãch v·ª• " + service.getServiceName() + " (" + service.getServiceType() + ") th√°ng " + String.format("%02d/%d", month, year));
                    detail.setServiceName(service.getServiceName());
                    detail.setUnitPriceAtBill(service.getUnitPrice());
                    detail.setConsumedUnits(totalConsumed);
                    detail.setItemAmount(amount);
                    result.add(detail);
                }
            } else if (service.getServiceType() == ServiceType.WATER || service.getServiceType() == ServiceType.OTHER) {
                BillDetailResponse detail = new BillDetailResponse();
                detail.setItemType(BillItemType.SERVICE);
                detail.setDescription("D·ªãch v·ª• c·ªë ƒë·ªãnh: " + service.getServiceName() + " th√°ng " + String.format("%02d/%d", month, year));
                detail.setServiceName(service.getServiceName());
                detail.setUnitPriceAtBill(service.getUnitPrice());
                detail.setItemAmount(service.getUnitPrice());
                result.add(detail);
            }
        }
        return result;
    }

    @Override
    public BillResponse createAndSaveServiceBill(Long roomId, int month, int year) {
        Room room = roomRepository.findById(roomId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y ph√≤ng"));
        // L·∫•y contract active c·ªßa ph√≤ng
        Contract contract = contractRepository.findActiveByRoomId(roomId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng c√≥ h·ª£p ƒë·ªìng ƒëang ho·∫°t ƒë·ªông cho ph√≤ng n√†y"));
        ZoneId vnZone = ZoneId.of("Asia/Ho_Chi_Minh");
        LocalDate monthStart = LocalDate.of(year, month, 1);
        LocalDate monthEnd = monthStart.withDayOfMonth(monthStart.lengthOfMonth());
        Instant fromInstant = monthStart.atStartOfDay(vnZone).toInstant();
        Instant toInstant = monthEnd.atTime(23, 59).atZone(vnZone).toInstant();
        List<BillDetail> details = new ArrayList<>();
        BigDecimal totalAmount = BigDecimal.ZERO;
        List<CustomService> services = room.getServiceMappings().stream()
            .filter(mapping -> Boolean.TRUE.equals(mapping.getIsActive()) ||
                (mapping.getEndDate() == null || !mapping.getEndDate().isBefore(monthEnd)))
            .map(RoomServiceMapping::getService)
            .collect(Collectors.toList());
        for (CustomService service : services) {
            if (service.getServiceType() == ServiceType.ELECTRICITY) {
                List<ServiceReading> readings = serviceReadingRepository.findByRoomAndServiceAndDateRange(
                        room.getId(), service, fromInstant, toInstant
                );
                BigDecimal totalConsumed = BigDecimal.ZERO;
                for (ServiceReading reading : readings) {
                    if (reading.getNewReading() != null && reading.getOldReading() != null) {
                        BigDecimal consumed = reading.getNewReading().subtract(reading.getOldReading());
                        if (consumed.compareTo(BigDecimal.ZERO) > 0) {
                            totalConsumed = totalConsumed.add(consumed);
                        }
                    }
                }
                if (totalConsumed.compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal amount = service.getUnitPrice().multiply(totalConsumed);
                    BillDetail detail = new BillDetail();
                    detail.setItemType(BillItemType.SERVICE);
                    detail.setDescription("D·ªãch v·ª• " + service.getServiceName() + " (" + service.getServiceType() + ") th√°ng " + String.format("%02d/%d", month, year));
                    detail.setService(service);
                    detail.setUnitPriceAtBill(service.getUnitPrice());
                    detail.setConsumedUnits(totalConsumed);
                    detail.setItemAmount(amount);
                    detail.setCreatedDate(Instant.now());
                    details.add(detail);
                    totalAmount = totalAmount.add(amount);
                }
            } else if (service.getServiceType() == ServiceType.WATER || service.getServiceType() == ServiceType.OTHER) {
                BillDetail detail = new BillDetail();
                detail.setItemType(BillItemType.SERVICE);
                detail.setDescription("D·ªãch v·ª• c·ªë ƒë·ªãnh: " + service.getServiceName() + " th√°ng " + String.format("%02d/%d", month, year));
                detail.setService(service);
                detail.setUnitPriceAtBill(service.getUnitPrice());
                detail.setItemAmount(service.getUnitPrice());
                detail.setCreatedDate(Instant.now());
                details.add(detail);
                totalAmount = totalAmount.add(service.getUnitPrice());
            }
        }
        Bill bill = new Bill();
        bill.setRoom(room);
        bill.setContract(contract);
        bill.setFromDate(fromInstant);
        bill.setToDate(toInstant);
        bill.setBillType(BillType.SERVICE);
        bill.setBillDate(Instant.now());
        bill.setTotalAmount(totalAmount);
        bill.setStatus(false);
        bill.setPaymentCycle(contract.getPaymentCycle());
        bill.setBillDetails(details);
        for (BillDetail detail : details) {
            detail.setBill(bill);
        }
        billRepository.save(bill);
        sendBillNotificationToAllUsers(bill);
        return toResponse(bill);
    }

    @Override
    public void deleteBillById(Long id) {
        Bill bill = billRepository.findById(id)
            .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n"));
        if (Boolean.TRUE.equals(bill.getStatus())) {
            throw new BusinessException("Kh√¥ng th·ªÉ x√≥a h√≥a ƒë∆°n ƒë√£ thanh to√°n.");
        }
        billRepository.deleteById(id);
    }

    @Override
    public Page<Bill> filterBills(Long roomId, Boolean status, BigDecimal minPrice, BigDecimal maxPrice, String search, Pageable pageable) {
        Specification<Bill> spec = (root, query, cb) -> cb.conjunction();

        if (roomId != null) {
            spec = spec.and((root, query, cb) -> cb.equal(root.get("room").get("id"), roomId));
        }
        if (status != null) {
            spec = spec.and((root, query, cb) -> cb.equal(root.get("status"), status));
        }
        if (minPrice != null) {
            spec = spec.and((root, query, cb) -> cb.ge(root.get("totalAmount"), minPrice));
        }
        if (maxPrice != null) {
            spec = spec.and((root, query, cb) -> cb.le(root.get("totalAmount"), maxPrice));
        }
        if (search != null && !search.isEmpty()) {
            spec = spec.and((root, query, cb) -> cb.or(
                    cb.like(cb.lower(root.get("room").get("roomNumber")), "%" + search.toLowerCase() + "%"),
                    cb.like(cb.function("str", String.class, root.get("id")), "%" + search + "%")
            ));
        }

        return billRepository.findAll(spec, pageable);
    }

    @Override
    public BillResponse createCustomBill(Long roomId, String name, String description, BigDecimal amount, Instant fromDate, Instant toDate) {
        Room room = roomRepository.findById(roomId)
            .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y ph√≤ng"));
        // Ki·ªÉm tra h·ª£p ƒë·ªìng active
        Contract contract = contractRepository.findActiveByRoomId(roomId)
            .orElseThrow(() -> new BusinessException("Ph√≤ng kh√¥ng c√≥ h·ª£p ƒë·ªìng ƒëang ho·∫°t ƒë·ªông. Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n."));

        Bill bill = new Bill();
        bill.setRoom(room);
        bill.setContract(contract);
        bill.setBillType(com.mpbhms.backend.enums.BillType.CUSTOM);
        bill.setBillDate(Instant.now());
        bill.setFromDate(fromDate);
        bill.setToDate(toDate);
        bill.setTotalAmount(amount);
        bill.setStatus(false);
        bill.setPaymentCycle(contract.getPaymentCycle());

        // T·∫°o bill detail
        BillDetail detail = new BillDetail();
        detail.setItemType(BillItemType.SERVICE);
        detail.setDescription(name + (description != null && !description.isEmpty() ? (": " + description) : ""));
        detail.setItemAmount(amount);
        detail.setCreatedDate(Instant.now());
        detail.setBill(bill);
        List<BillDetail> details = new ArrayList<>();
        details.add(detail);
        bill.setBillDetails(details);

        billRepository.save(bill);
        sendBillNotificationToAllUsers(bill);
        return toResponse(bill);
    }

    @Override
    public List<BillResponse> bulkGenerateBills() {
        System.out.println("\nüöÄ BULK BILL GENERATION STARTED");
        List<BillResponse> generatedBills = new ArrayList<>();
        
        // L·∫•y t·∫•t c·∫£ h·ª£p ƒë·ªìng ACTIVE
        List<Contract> activeContracts = contractRepository.findAll().stream()
            .filter(contract -> contract.getContractStatus() == ContractStatus.ACTIVE)
            .toList();
        
        System.out.println("üìã Found " + activeContracts.size() + " active contracts");
        
        LocalDate today = LocalDate.now();
        
        for (Contract contract : activeContracts) {
            try {
                System.out.println("\n--- Processing Contract #" + contract.getId() + " ---");
                System.out.println("Room: " + contract.getRoom().getRoomNumber());
                System.out.println("Payment Cycle: " + contract.getPaymentCycle());
                
                // T√≠nh to√°n chu k·ª≥ ti·∫øp theo c·∫ßn t·∫°o bill
                LocalDate contractStart = contract.getContractStartDate().atZone(ZoneId.systemDefault()).toLocalDate();
                LocalDate contractEnd = contract.getContractEndDate().atZone(ZoneId.systemDefault()).toLocalDate();
                
                if (today.isAfter(contractEnd)) {
                    System.out.println("‚è≠Ô∏è Contract expired, skipping");
                    continue;
                }
                
                PaymentCycle cycle = contract.getPaymentCycle();
                LocalDate nextPeriodStart = calculateNextPeriodStart(contractStart, cycle, today);
                LocalDate nextPeriodEnd = calculatePeriodEnd(nextPeriodStart, cycle);
                
                // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° ng√†y k·∫øt th√∫c h·ª£p ƒë·ªìng
                if (nextPeriodEnd.isAfter(contractEnd)) {
                    nextPeriodEnd = contractEnd;
                }
                
                System.out.println("üìÖ Next period: " + nextPeriodStart + " to " + nextPeriodEnd);
                
                // Ki·ªÉm tra ƒë√£ c√≥ bill cho chu k·ª≥ n√†y ch∆∞a
                boolean billExists = checkBillExists(contract.getId(), nextPeriodStart, nextPeriodEnd);
                
                if (billExists) {
                    System.out.println("‚úÖ Bill already exists for this period, skipping");
                    continue;
                }
                
                // T·∫°o bill m·ªõi
                Bill newBill = generateBill(contract.getId(), nextPeriodStart, nextPeriodEnd, BillType.CONTRACT_TOTAL);
                generatedBills.add(toResponse(newBill));
                
                System.out.println("‚úÖ Generated bill #" + newBill.getId() + " - Amount: " + newBill.getTotalAmount() + " VND");
                
            } catch (Exception e) {
                System.out.println("‚ùå Error processing contract #" + contract.getId() + ": " + e.getMessage());
                // Ti·∫øp t·ª•c v·ªõi contracts kh√°c
            }
        }
        
        System.out.println("\nüèÅ BULK GENERATION COMPLETED");
        System.out.println("üìä Generated " + generatedBills.size() + " new bills");
        
        return generatedBills;
    }

    /**
     * T√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu chu k·ª≥ ti·∫øp theo
     */
    private LocalDate calculateNextPeriodStart(LocalDate contractStart, PaymentCycle cycle, LocalDate today) {
        int cycleMonths = countMonths(cycle);
        
        // T√¨m chu k·ª≥ hi·ªán t·∫°i ho·∫∑c ti·∫øp theo
        LocalDate periodStart = contractStart;
        
        while (periodStart.isBefore(today) || periodStart.equals(today)) {
            LocalDate periodEnd = calculatePeriodEnd(periodStart, cycle);
            
            // N·∫øu h√¥m nay n·∫±m trong chu k·ª≥ n√†y, tr·∫£ v·ªÅ chu k·ª≥ n√†y
            if (!today.isAfter(periodEnd)) {
                return periodStart;
            }
            
            // Chuy·ªÉn sang chu k·ª≥ ti·∫øp theo
            periodStart = periodStart.plusMonths(cycleMonths);
        }
        
        return periodStart;
    }

    /**
     * T√≠nh to√°n ng√†y k·∫øt th√∫c chu k·ª≥
     */
    private LocalDate calculatePeriodEnd(LocalDate periodStart, PaymentCycle cycle) {
        int cycleMonths = countMonths(cycle);
        return periodStart.plusMonths(cycleMonths).minusDays(1);
    }

    /**
     * Ki·ªÉm tra ƒë√£ c√≥ bill cho chu k·ª≥ n√†y ch∆∞a
     */
    private boolean checkBillExists(Long contractId, LocalDate fromDate, LocalDate toDate) {
        ZoneId vnZone = ZoneId.of("Asia/Ho_Chi_Minh");
        Instant fromInstant = fromDate.atStartOfDay(vnZone).toInstant();
        Instant toInstant = toDate.atTime(23, 59).atZone(vnZone).toInstant();
        
        return billRepository.findAll().stream()
            .anyMatch(bill -> 
                bill.getContract().getId().equals(contractId) &&
                bill.getFromDate().equals(fromInstant) &&
                bill.getToDate().equals(toInstant)
            );
    }

    @Override
    public byte[] generateBillPdf(Long billId) {
        Bill bill = billRepository.findById(billId)
            .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n"));
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4, 50, 50, 50, 50);
        try {
            // Load Arial font from resources
            InputStream fontStream = getClass().getClassLoader().getResourceAsStream("fonts/arial.ttf");
            if (fontStream == null) throw new RuntimeException("Kh√¥ng t√¨m th·∫•y font Arial");
            byte[] fontBytes = fontStream.readAllBytes();
            BaseFont baseFont = BaseFont.createFont("arial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, BaseFont.CACHED, fontBytes, null);
            Font titleFont = new Font(baseFont, 18, Font.BOLD);
            Font headerFont = new Font(baseFont, 14, Font.BOLD);
            Font normalFont = new Font(baseFont, 12, Font.NORMAL);
            Font smallBold = new Font(baseFont, 12, Font.BOLD);

            PdfWriter.getInstance(document, baos);
            document.open();

            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy").withZone(ZoneId.systemDefault());
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

            // Vi·ªát h√≥a lo·∫°i h√≥a ƒë∆°n
            String billTypeVN;
            switch (String.valueOf(bill.getBillType())) {
                case "CONTRACT_TOTAL":
                    billTypeVN = "T·ªïng h·ª£p ƒë·ªìng"; break;
                case "CONTRACT_ROOM_RENT":
                    billTypeVN = "Ti·ªÅn ph√≤ng h·ª£p ƒë·ªìng"; break;
                case "CONTRACT_SERVICE":
                    billTypeVN = "D·ªãch v·ª• h·ª£p ƒë·ªìng"; break;
                case "REGULAR":
                    billTypeVN = "Ti·ªÅn ph√≤ng"; break;
                case "SERVICE":
                    billTypeVN = "D·ªãch v·ª•"; break;
                case "DEPOSIT":
                    billTypeVN = "ƒê·∫∑t c·ªçc"; break;
                case "CUSTOM":
                    billTypeVN = "T√πy ch·ªânh"; break;
                default:
                    billTypeVN = String.valueOf(bill.getBillType());
            }
            // Vi·ªát h√≥a chu k·ª≥ thanh to√°n
            String paymentCycleVN = null;
            if (bill.getContract() != null) {
                switch (String.valueOf(bill.getContract().getPaymentCycle())) {
                    case "MONTHLY":
                        paymentCycleVN = "H√†ng th√°ng"; break;
                    case "QUARTERLY":
                        paymentCycleVN = "H√†ng qu√Ω"; break;
                    case "YEARLY":
                        paymentCycleVN = "H√†ng nƒÉm"; break;
                    default:
                        paymentCycleVN = String.valueOf(bill.getContract().getPaymentCycle());
                }
            }

            // Header
            Paragraph header = new Paragraph("H√ìA ƒê∆†N THANH TO√ÅN", titleFont);
            header.setAlignment(Element.ALIGN_CENTER);
            header.setSpacingAfter(20f);
            document.add(header);

            // Th√¥ng tin h√≥a ƒë∆°n (b·∫£ng)
            PdfPTable infoTable = new PdfPTable(2);
            infoTable.setWidthPercentage(100);
            infoTable.setSpacingAfter(10f);
            infoTable.addCell(new PdfPCell(new Phrase("M√£ h√≥a ƒë∆°n:", smallBold)));
            infoTable.addCell(new PdfPCell(new Phrase(String.valueOf(bill.getId()), normalFont)));
            infoTable.addCell(new PdfPCell(new Phrase("Lo·∫°i h√≥a ƒë∆°n:", smallBold)));
            infoTable.addCell(new PdfPCell(new Phrase(billTypeVN, normalFont)));
            infoTable.addCell(new PdfPCell(new Phrase("Ng√†y l·∫≠p:", smallBold)));
            infoTable.addCell(new PdfPCell(new Phrase(dateTimeFormatter.format(bill.getBillDate().atZone(ZoneId.systemDefault())), normalFont)));
            document.add(new Paragraph("TH√îNG TIN H√ìA ƒê∆†N:", headerFont));
            document.add(infoTable);

            // Th√¥ng tin ph√≤ng (b·∫£ng)
            PdfPTable roomTable = new PdfPTable(2);
            roomTable.setWidthPercentage(100);
            roomTable.setSpacingAfter(10f);
            roomTable.addCell(new PdfPCell(new Phrase("S·ªë ph√≤ng:", smallBold)));
            roomTable.addCell(new PdfPCell(new Phrase(bill.getRoom().getRoomNumber(), normalFont)));
            if (bill.getRoom().getBuilding() != null && !bill.getRoom().getBuilding().isEmpty()) {
                roomTable.addCell(new PdfPCell(new Phrase("T√≤a nh√†:", smallBold)));
                roomTable.addCell(new PdfPCell(new Phrase(bill.getRoom().getBuilding(), normalFont)));
            }
            document.add(new Paragraph("TH√îNG TIN PH√íNG:", headerFont));
            document.add(roomTable);

            // Th√¥ng tin h·ª£p ƒë·ªìng (b·∫£ng)
            if (bill.getContract() != null) {
                PdfPTable contractTable = new PdfPTable(2);
                contractTable.setWidthPercentage(100);
                contractTable.setSpacingAfter(10f);
                contractTable.addCell(new PdfPCell(new Phrase("M√£ h·ª£p ƒë·ªìng:", smallBold)));
                contractTable.addCell(new PdfPCell(new Phrase(String.valueOf(bill.getContract().getId()), normalFont)));
                contractTable.addCell(new PdfPCell(new Phrase("Chu k·ª≥ thanh to√°n:", smallBold)));
                contractTable.addCell(new PdfPCell(new Phrase(paymentCycleVN, normalFont)));
                document.add(new Paragraph("TH√îNG TIN H·ª¢P ƒê·ªíNG:", headerFont));
                document.add(contractTable);
            }

            // Th√¥ng tin ng∆∞·ªùi thu√™ (b·∫£ng)
            if (bill.getContract() != null && bill.getContract().getRoomUsers() != null) {
                PdfPTable renterTable = new PdfPTable(2);
                renterTable.setWidthPercentage(100);
                renterTable.setSpacingAfter(10f);
                renterTable.addCell(new PdfPCell(new Phrase("H·ªç t√™n", smallBold)));
                renterTable.addCell(new PdfPCell(new Phrase("S·ªë ƒëi·ªán tho·∫°i", smallBold)));
                for (RoomUser roomUser : bill.getContract().getRoomUsers()) {
                    if (roomUser.getUser() != null && roomUser.getUser().getUserInfo() != null) {
                        renterTable.addCell(new PdfPCell(new Phrase(roomUser.getUser().getUserInfo().getFullName(), normalFont)));
                        renterTable.addCell(new PdfPCell(new Phrase(roomUser.getUser().getUserInfo().getPhoneNumber(), normalFont)));
                    }
                }
                document.add(new Paragraph("NG∆Ø·ªúI THU√ä:", headerFont));
                document.add(renterTable);
            }

            // Th·ªùi gian t√≠nh ti·ªÅn (b·∫£ng)
            PdfPTable timeTable = new PdfPTable(2);
            timeTable.setWidthPercentage(100);
            timeTable.setSpacingAfter(10f);
            timeTable.addCell(new PdfPCell(new Phrase("T·ª´ ng√†y:", smallBold)));
            timeTable.addCell(new PdfPCell(new Phrase(dateFormatter.format(bill.getFromDate().atZone(ZoneId.systemDefault())), normalFont)));
            timeTable.addCell(new PdfPCell(new Phrase("ƒê·∫øn ng√†y:", smallBold)));
            timeTable.addCell(new PdfPCell(new Phrase(dateFormatter.format(bill.getToDate().atZone(ZoneId.systemDefault())), normalFont)));
            document.add(new Paragraph("TH·ªúI GIAN T√çNH TI·ªÄN:", headerFont));
            document.add(timeTable);

            // Chi ti·∫øt h√≥a ƒë∆°n (b·∫£ng)
            document.add(new Paragraph("CHI TI·∫æT H√ìA ƒê∆†N:", headerFont));
            PdfPTable detailTable = new PdfPTable(4);
            detailTable.setWidthPercentage(100);
            detailTable.setSpacingAfter(10f);
            detailTable.addCell(new PdfPCell(new Phrase("Di·ªÖn gi·∫£i", smallBold)));
            detailTable.addCell(new PdfPCell(new Phrase("S·ªë l∆∞·ª£ng", smallBold)));
            detailTable.addCell(new PdfPCell(new Phrase("ƒê∆°n gi√°", smallBold)));
            detailTable.addCell(new PdfPCell(new Phrase("Th√†nh ti·ªÅn", smallBold)));
            BigDecimal totalAmount = BigDecimal.ZERO;
            for (BillDetail detail : bill.getBillDetails()) {
                detailTable.addCell(new PdfPCell(new Phrase(detail.getDescription(), normalFont)));
                detailTable.addCell(new PdfPCell(new Phrase(detail.getConsumedUnits() != null ? detail.getConsumedUnits().toString() : "-", normalFont)));
                detailTable.addCell(new PdfPCell(new Phrase(detail.getUnitPriceAtBill() != null ? currencyFormat.format(detail.getUnitPriceAtBill()) : "-", normalFont)));
                detailTable.addCell(new PdfPCell(new Phrase(detail.getItemAmount() != null ? currencyFormat.format(detail.getItemAmount()) : "-", normalFont)));
                if (detail.getItemAmount() != null) {
                    totalAmount = totalAmount.add(detail.getItemAmount());
                }
            }
            document.add(detailTable);

            // T·ªïng ti·ªÅn v√† tr·∫°ng th√°i
            PdfPTable totalTable = new PdfPTable(2);
            totalTable.setWidthPercentage(60);
            totalTable.setHorizontalAlignment(Element.ALIGN_RIGHT);
            totalTable.setSpacingAfter(10f);
            totalTable.addCell(new PdfPCell(new Phrase("T·ªîNG C·ªòNG:", smallBold)));
            totalTable.addCell(new PdfPCell(new Phrase(currencyFormat.format(totalAmount), smallBold)));
            String status = bill.getStatus() ? "ƒê√É THANH TO√ÅN" : "CH∆ØA THANH TO√ÅN";
            totalTable.addCell(new PdfPCell(new Phrase("Tr·∫°ng th√°i:", smallBold)));
            totalTable.addCell(new PdfPCell(new Phrase(status, smallBold)));
            document.add(totalTable);

            document.close();
        } catch (Exception e) {
            throw new RuntimeException("Error generating PDF", e);
        }
        return baos.toByteArray();
    }

    @Override
    public Page<Bill> getBillsByUserId(Long userId, Pageable pageable) {
        return billRepository.findDistinctByContract_RoomUsers_User_Id(userId, pageable);
    }

    // G·ª≠i notification cho t·ª´ng user trong ph√≤ng ·ª©ng v·ªõi h·ª£p ƒë·ªìng khi g·ª≠i bill
    private void sendBillNotificationToAllUsers(Bill bill) {
        Contract contract = bill.getContract();
        if (contract.getRoomUsers() != null) {
            for (RoomUser ru : contract.getRoomUsers()) {
                if (ru.getUser() != null && Boolean.TRUE.equals(ru.getIsActive())) {
                    NotificationDTO noti = new NotificationDTO();
                    noti.setRecipientId(ru.getUser().getId());
                    noti.setTitle("H√≥a ƒë∆°n m·ªõi cho ph√≤ng " + contract.getRoom().getRoomNumber());
                    noti.setMessage("B·∫°n c√≥ h√≥a ƒë∆°n m·ªõi #" + bill.getId() + " t·ª´ " +
                        bill.getFromDate().atZone(java.time.ZoneId.systemDefault()).toLocalDate() + " ƒë·∫øn " +
                        bill.getToDate().atZone(java.time.ZoneId.systemDefault()).toLocalDate() + ". Vui l√≤ng ki·ªÉm tra v√† thanh to√°n.");
                    noti.setType(NotificationType.CUSTOM); // C√≥ th·ªÉ th√™m m·ªõi BILL n·∫øu mu·ªën
                    noti.setMetadata("{\"billId\":" + bill.getId() + "}");
                    notificationService.createAndSend(noti);
                }
            }
        }
    }
}

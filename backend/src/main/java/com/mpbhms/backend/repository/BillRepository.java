package com.mpbhms.backend.repository;

import com.mpbhms.backend.entity.BillDetail;
import com.mpbhms.backend.entity.CustomService;
import com.mpbhms.backend.entity.Bill;
import com.mpbhms.backend.enums.BillType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.time.Instant;
import java.util.List;
import java.util.Optional;

import com.mpbhms.backend.entity.Contract;
import com.mpbhms.backend.entity.Room;

import java.math.BigDecimal;

public interface BillRepository extends JpaRepository<Bill, Long>, JpaSpecificationExecutor<Bill> {
    Page<Bill> findByContractId(Long contractId, Pageable pageable);
    Page<Bill> findByRoomId(Long roomId, Pageable pageable);

    // Th√™m h√†m t√¨m bill ƒë·∫ßu ti√™n theo h·ª£p ƒë·ªìng
    Optional<Bill> findFirstByContractIdAndBillType(Long contractId, BillType billType);

    // T√¨m t·∫•t c·∫£ bill m√† user l√† ng∆∞·ªùi thu√™ trong h·ª£p ƒë·ªìng
    Page<Bill> findDistinctByContract_RoomUsers_User_Id(Long userId, Pageable pageable);

    // Ki·ªÉm tra h√≥a ƒë∆°n tr√πng (c√πng ph√≤ng, h·ª£p ƒë·ªìng, lo·∫°i h√≥a ƒë∆°n, t·ª´ ng√†y, ƒë·∫øn ng√†y)
    boolean existsByRoomAndContractAndBillTypeAndFromDateAndToDate(
        Room room,
        Contract contract,
        BillType billType,
        Instant fromDate,
        Instant toDate
    );

    // ƒê·∫øm s·ªë h√≥a ƒë∆°n ch∆∞a thanh to√°n
    long countByStatusFalse();
    // ƒê·∫øm s·ªë h√≥a ƒë∆°n ƒë√£ thanh to√°n
    long countByStatusTrue();
    // ƒê·∫øm s·ªë h√≥a ƒë∆°n qu√° h·∫°n (ch∆∞a thanh to√°n v√† toDate + 7 ng√†y < hi·ªán t·∫°i - t·ª´ ng√†y th·ª© 7 tr·ªü ƒëi)
    @Query("SELECT COUNT(b) FROM Bill b WHERE b.status = false AND b.toDate < :sevenDaysAgo")
    long countOverdue(@Param("sevenDaysAgo") Instant sevenDaysAgo);

    // T·ªïng doanh thu ƒë√£ thanh to√°n (bao g·ªìm c·∫£ thanh to√°n t·ª´ng ph·∫ßn v√† ph√≠)
    @Query("SELECT COALESCE(SUM(COALESCE(b.paidAmount, 0) + COALESCE(b.partialPaymentFeesCollected, 0)), 0) FROM Bill b WHERE COALESCE(b.paidAmount, 0) > 0")
    BigDecimal getTotalRevenue();

    // Doanh thu theo th√°ng (6 th√°ng g·∫ßn nh·∫•t) - t√≠nh theo ti·ªÅn th·ª±c thu
    @Query("SELECT FUNCTION('DATE_FORMAT', COALESCE(b.paidDate, b.lastPaymentDate, b.toDate), '%Y-%m') as month, " +
           "COALESCE(SUM(COALESCE(b.paidAmount, 0) + COALESCE(b.partialPaymentFeesCollected, 0)), 0) as revenue " +
           "FROM Bill b WHERE COALESCE(b.paidAmount, 0) > 0 AND COALESCE(b.paidDate, b.lastPaymentDate, b.toDate) >= :from " +
           "GROUP BY month ORDER BY month ASC")
    List<Object[]> getRevenueByMonth(@Param("from") Instant from);

    // Doanh thu th√°ng hi·ªán t·∫°i - t√≠nh theo ti·ªÅn th·ª±c thu
    @Query("SELECT COALESCE(SUM(COALESCE(b.paidAmount, 0) + COALESCE(b.partialPaymentFeesCollected, 0)), 0) " +
           "FROM Bill b WHERE COALESCE(b.paidAmount, 0) > 0 AND " +
           "FUNCTION('DATE_FORMAT', COALESCE(b.paidDate, b.lastPaymentDate, b.toDate), '%Y-%m') = :month")
    BigDecimal getMonthRevenue(@Param("month") String month);

    // Ki·ªÉm tra ƒë√£ t·ªìn t·∫°i h√≥a ƒë∆°n ph·∫°t cho h√≥a ƒë∆°n g·ªëc
    boolean existsByOriginalBillAndBillType(Bill originalBill, BillType billType);
    
    // üÜï Th·ªëng k√™ doanh thu chi ti·∫øt
    @Query("SELECT COALESCE(SUM(COALESCE(b.paidAmount, 0)), 0) FROM Bill b WHERE COALESCE(b.paidAmount, 0) > 0")
    BigDecimal getTotalBillRevenue();
    
    @Query("SELECT COALESCE(SUM(COALESCE(b.partialPaymentFeesCollected, 0)), 0) FROM Bill b WHERE COALESCE(b.partialPaymentFeesCollected, 0) > 0")
    BigDecimal getTotalFeeRevenue();
    
    @Query("SELECT COUNT(b) FROM Bill b WHERE b.isPartiallyPaid = true")
    long countPartiallyPaidBills();

    // T√¨m h√≥a ƒë∆°n qu√° h·∫°n (ch∆∞a thanh to√°n v√† toDate + 7 ng√†y < hi·ªán t·∫°i)
    @Query("SELECT b FROM Bill b WHERE b.status = false AND b.toDate < :sevenDaysAgo AND b.billType != 'LATE_PENALTY'")
    List<Bill> findByStatusFalseAndToDateBefore(@Param("sevenDaysAgo") Instant sevenDaysAgo);
    
    // T√¨m t·∫•t c·∫£ h√≥a ƒë∆°n ch∆∞a thanh to√°n (kh√¥ng ph·∫£i h√≥a ƒë∆°n ph·∫°t)
    @Query("SELECT b FROM Bill b WHERE b.status = false AND b.billType != 'LATE_PENALTY'")
    List<Bill> findByStatusFalse();
}
package com.mpbhms.backend.controller;

import com.mpbhms.backend.entity.Bill;
import com.mpbhms.backend.entity.PaymentHistory;
import com.mpbhms.backend.repository.BillRepository;
import com.mpbhms.backend.repository.PaymentHistoryRepository;
import com.mpbhms.backend.service.BillService;
import com.mpbhms.backend.service.PaymentHistoryService;
import com.mpbhms.backend.service.VnPayService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RestController
@RequestMapping("/mpbhms/vnpay")
@RequiredArgsConstructor
public class VnPayCallbackController {

    private final VnPayService vnPayService;
    private final BillService billService;
    private final PaymentHistoryService paymentHistoryService;
    private final PaymentHistoryRepository paymentHistoryRepository;
    private final BillRepository billRepository;

    // Tr·∫£ v·ªÅ t·ª´ tr√¨nh duy·ªát sau khi thanh to√°n
    @GetMapping("/return")
    public ResponseEntity<?> vnpReturn(@RequestParam Map<String, String> params) {
        return processVnpay(params, false);
    }

    // IPN server-to-server (n·∫øu ƒë√£ ƒëƒÉng k√Ω)
    @GetMapping("/ipn")
    public ResponseEntity<?> vnpIpn(@RequestParam Map<String, String> params) {
        return processVnpay(params, true);
    }

    private ResponseEntity<?> processVnpay(Map<String, String> params, boolean isIpn) {
        try {
            // 1) Validate ch·ªØ k√Ω & tr·∫°ng th√°i
            if (!vnPayService.validateSignature(params, "")) {
                return ResponseEntity.badRequest().body("Sai ch·ªØ k√Ω VNPay");
            }
            String respCode = params.getOrDefault("vnp_ResponseCode", "");
            String transStatus = params.getOrDefault("vnp_TransactionStatus", "");
            if (!"00".equals(respCode) || !"00".equals(transStatus)) {
                return ResponseEntity.badRequest().body("Giao d·ªãch kh√¥ng th√†nh c√¥ng");
            }

            // 2) L·∫•y th√¥ng tin c·∫ßn thi·∫øt
            String orderInfo = params.getOrDefault("vnp_OrderInfo", "");
            String txnRef     = params.getOrDefault("vnp_TxnRef", "");
            String transNo    = params.getOrDefault("vnp_TransactionNo", ""); // d√πng ch·ªëng ghi tr√πng
            String payDateStr = params.getOrDefault("vnp_PayDate", "");       // yyyyMMddHHmmss
            String amountStr  = params.getOrDefault("vnp_Amount", "0");       // nh√¢n 100

            // 3) Idempotent: n·∫øu transactionNo ƒë√£ t·ªìn t·∫°i th√¨ b·ªè qua (t·∫°m th·ªùi b·ªè qua)
            // if (transNo != null && !transNo.isBlank()
            //         && paymentHistoryRepository.findByTransactionId(transNo) != null) {
            //     return ResponseEntity.ok(Map.of("message", "ƒê√£ ghi nh·∫≠n giao d·ªãch tr∆∞·ªõc ƒë√≥"));
            // }

            // 4) Parse s·ªë ti·ªÅn & ng√†y thanh to√°n
            BigDecimal totalPaid = new BigDecimal(amountStr).divide(new BigDecimal("100"), 0, RoundingMode.HALF_UP);
            Instant paymentInstant = parseVnpPayDate(payDateStr).orElse(Instant.now());

            // 5) T√°ch billId & originalAmount (ti·ªÅn g·ªëc)
            Long billId = parseBillId(orderInfo).orElseGet(() -> parseBillIdFromTxnRef(txnRef).orElse(null));
            if (billId == null) return ResponseEntity.badRequest().body("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c billId");

            // 6) L·∫•y originalAmount (ti·ªÅn g·ªëc KH mu·ªën tr·∫£), KH√îNG ƒë∆∞·ª£c default = outstandingBefore
            BigDecimal originalAmount = parseOriginalAmount(orderInfo)   // t·ª´ "|originalAmount:..."
                    .orElse(totalPaid);                                  // fallback b·∫•t ƒë·∫Øc dƒ©
            
            if (originalAmount.compareTo(BigDecimal.ZERO) <= 0) {
                System.out.println("‚ùå originalAmount kh√¥ng h·ª£p l·ªá: " + originalAmount);
                return ResponseEntity.badRequest().body("originalAmount kh√¥ng h·ª£p l·ªá");
            }

            // 7) L·∫•y bill v√† gi·ªØ BEFORE
            Bill bill = billService.getBillById(billId);
            BigDecimal outstandingBefore = 
                bill.getOutstandingAmount() != null ? bill.getOutstandingAmount() : bill.getTotalAmount();
            BigDecimal paidBefore = bill.getPaidAmount() != null ? bill.getPaidAmount() : BigDecimal.ZERO;

            // 8) T√≠nh AFTER tr∆∞·ªõc khi update bill
            BigDecimal outstandingAfter = outstandingBefore.subtract(originalAmount);
            if (outstandingAfter.compareTo(BigDecimal.ZERO) < 0) outstandingAfter = BigDecimal.ZERO;
            BigDecimal paidAfter = paidBefore.add(originalAmount);

            // T√≠nh ph√≠ thanh to√°n t·ª´ng ph·∫ßn
            BigDecimal partialFee = totalPaid.subtract(originalAmount).max(BigDecimal.ZERO);

            // Log th√¥ng tin ƒë·ªÉ debug
            System.out.println("üîç DEBUG VNPAY CALLBACK:");
            System.out.println("üîç orderInfo: " + orderInfo);
            System.out.println("üîç originalAmount: " + originalAmount);
            System.out.println("üîç totalPaid: " + totalPaid);
            System.out.println("üîç outstandingBefore: " + outstandingBefore);
            System.out.println("üîç outstandingAfter: " + outstandingAfter);
            System.out.println("üîç paidBefore: " + paidBefore);
            System.out.println("üîç paidAfter: " + paidAfter);
            System.out.println("üîç partialFee: " + partialFee);

            // 9) L∆∞u PaymentHistory d√πng ch√≠nh c√°c bi·∫øn v·ª´a t√≠nh
            PaymentHistory ph = new PaymentHistory();
            ph.setBill(bill);
            ph.setPaymentMethod("VNPAY");
            ph.setStatus("SUCCESS");
            ph.setPaymentDate(paymentInstant);
            ph.setPaymentNumber(billService.getPaymentCount(bill.getId()) + 1);

            ph.setPaymentAmount(originalAmount); // TI·ªÄN G·ªêC
            ph.setTotalAmount(totalPaid);        // t·ªïng VNPay tr·∫£ (g·ªìm ph√≠)
            ph.setPartialPaymentFee(partialFee);
            ph.setOverdueInterest(BigDecimal.ZERO);

            ph.setOutstandingBefore(outstandingBefore);
            ph.setOutstandingAfter(outstandingAfter);
            ph.setPaidBefore(paidBefore);
            ph.setPaidAfter(paidAfter);

            ph.setIsPartialPayment(originalAmount.compareTo(outstandingBefore) < 0);
            ph.setMonthsOverdue(calculateOverdueMonths(bill));
            ph.setTransactionId(transNo);
            ph.setNotes(isIpn ? "VNPay IPN" : "VNPay return");

            paymentHistoryService.savePaymentHistory(ph);

            // 10) C·∫≠p nh·∫≠t Bill SAU KHI ƒë√£ set ph
            bill.addPayment(originalAmount);
            BigDecimal fee = ph.getPartialPaymentFee();
            if (fee != null && fee.compareTo(BigDecimal.ZERO) > 0) bill.addPartialPaymentFee(fee);
            bill.setStatus(bill.getOutstandingAmount().compareTo(BigDecimal.ZERO) <= 0);
            billRepository.save(bill);

            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "ƒê√£ ghi nh·∫≠n thanh to√°n VNPay th√†nh c√¥ng",
                    "billId", bill.getId(),
                    "paymentHistoryId", ph.getId(),
                    "outstandingAfter", ph.getOutstandingAfter()
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("L·ªói callback VNPay: " + e.getMessage());
        }
    }

    // === Helpers ===

    private Optional<Long> parseBillId(String orderInfo) {
        // v√≠ d·ª• "Thanh to√°n t·ª´ng ph·∫ßn h√≥a ƒë∆°n #123|originalAmount:456000"
        Matcher m = Pattern.compile("#(\\d+)").matcher(orderInfo);
        if (m.find()) return Optional.of(Long.parseLong(m.group(1)));
        return Optional.empty();
    }

    private Optional<Long> parseBillIdFromTxnRef(String txnRef) {
        // n·∫øu b·∫°n encode d·∫°ng BILL_<id>_TIMESTAMP
        Matcher m = Pattern.compile("(\\d+)").matcher(txnRef);
        if (m.find()) return Optional.of(Long.parseLong(m.group(1)));
        return Optional.empty();
    }

    private Optional<BigDecimal> parseOriginalAmount(String orderInfo) {
        // T√¨m "originalAmount:..." ·ªü cu·ªëi chu·ªói
        Pattern p = Pattern.compile("\\|originalAmount:([0-9.,]+)");
        Matcher m = p.matcher(orderInfo != null ? orderInfo : "");
        if (m.find()) {
            String raw = m.group(1);
            return Optional.of(normalizeVnd(raw));
        }
        return Optional.empty();
    }

    private BigDecimal normalizeVnd(String s) {
        // B·ªè d·∫•u ch·∫•m/ngƒÉn ngh√¨n, ch·ªâ gi·ªØ s·ªë
        String clean = s.replace(".", "").replace(",", "");
        return new BigDecimal(clean);
    }

    private Optional<Instant> parseVnpPayDate(String vnpPayDate) {
        // VNPay format: yyyyMMddHHmmss (UTC+7)
        try {
            if (vnpPayDate == null || vnpPayDate.isBlank()) return Optional.empty();
            DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
            LocalDateTime ldt = LocalDateTime.parse(vnpPayDate, fmt);
            // VNPay tr·∫£ theo VN time ‚Üí convert sang Instant
            ZonedDateTime zdt = ldt.atZone(ZoneId.of("Asia/Ho_Chi_Minh"));
            return Optional.of(zdt.toInstant());
        } catch (Exception e) {
            return Optional.empty();
        }
    }

    private int calculateOverdueMonths(Bill bill) {
        if (bill.getDueDate() == null) return 0;
        try {
            Instant due = bill.getDueDate();
            Instant now = Instant.now();
            if (now.isBefore(due)) return 0;
            long days = java.time.temporal.ChronoUnit.DAYS.between(due, now);
            return (int) Math.ceil(days / 30.44); // g·∫ßn ƒë√∫ng s·ªë th√°ng
        } catch (Exception e) {
            return 0;
        }
    }
}

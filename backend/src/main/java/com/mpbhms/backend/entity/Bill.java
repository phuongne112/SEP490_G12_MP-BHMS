package com.mpbhms.backend.entity;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.mpbhms.backend.enums.BillType;
import com.mpbhms.backend.enums.PaymentCycle;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "bills")
@Getter
@Setter
public class Bill extends BaseEntity {

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "room_id", nullable = false)
    private Room room;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "contract_id", nullable = false)
    private Contract contract;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss a",timezone = "GMT+7")
    @Column(name = "from_date", nullable = false)
    private Instant fromDate;
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss a",timezone = "GMT+7")
    @Column(name = "to_date", nullable = false)
    private Instant toDate;

    @Enumerated(EnumType.STRING)
    @Column(name = "payment_cycle", nullable = false)
    private PaymentCycle paymentCycle;

    @Column(name = "total_amount", precision = 15, scale = 2, nullable = false)
    private BigDecimal totalAmount;
    
    // C√°c tr∆∞·ªùng m·ªõi cho thanh to√°n t·ª´ng ph·∫ßn
    @Column(name = "paid_amount", precision = 15, scale = 2)
    private BigDecimal paidAmount = BigDecimal.ZERO; // S·ªë ti·ªÅn g·ªëc ƒë√£ thanh to√°n
    
    @Column(name = "partial_payment_fees_collected", precision = 15, scale = 2)
    private BigDecimal partialPaymentFeesCollected = BigDecimal.ZERO; // T·ªïng ph√≠ thanh to√°n t·ª´ng ph·∫ßn ƒë√£ thu
    
    @Column(name = "outstanding_amount", precision = 15, scale = 2)
    private BigDecimal outstandingAmount; // S·ªë ti·ªÅn c√≤n n·ª£
    
    @Column(name = "is_partially_paid")
    private Boolean isPartiallyPaid = false; // ƒê√°nh d·∫•u thanh to√°n t·ª´ng ph·∫ßn
    
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss a",timezone = "GMT+7")
    @Column(name = "last_payment_date")
    private Instant lastPaymentDate; // Ng√†y thanh to√°n cu·ªëi c√πng
    
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss a",timezone = "GMT+7")
    @Column(name = "bill_date", nullable = false)
    private Instant billDate;
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss a",timezone = "GMT+7")
    @Column(name = "due_date")
    private Instant dueDate;
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss a",timezone = "GMT+7")
    @Column(name = "paid_date")
    private Instant paidDate;

    @Column(name = "status")
    private Boolean status = false;

    @Enumerated(EnumType.STRING)
    @Column(name = "bill_type", nullable = false, length = 20)
    private BillType billType = BillType.CONTRACT_TOTAL;

    @Column(columnDefinition = "TEXT")
    private String notes;

    // Tr∆∞·ªùng ƒë·ªÉ theo d√µi h√≥a ƒë∆°n ph·∫°t
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "original_bill_id")
    private Bill originalBill; // H√≥a ƒë∆°n g·ªëc b·ªã ph·∫°t

    @Column(name = "penalty_rate", precision = 5, scale = 2)
    private BigDecimal penaltyRate; // T·ª∑ l·ªá ph·∫°t (%)

    @Column(name = "overdue_days")
    private Integer overdueDays; // S·ªë ng√†y qu√° h·∫°n

    @Column(name = "penalty_amount", precision = 15, scale = 2)
    private BigDecimal penaltyAmount; // S·ªë ti·ªÅn ph·∫°t

    // Tr∆∞·ªùng ƒë·ªÉ theo d√µi l√£i su·∫•t cho thanh to√°n t·ª´ng ph·∫ßn
    @Column(name = "interest_amount", precision = 15, scale = 2)
    private BigDecimal interestAmount = BigDecimal.ZERO; // S·ªë ti·ªÅn l√£i hi·ªán t·∫°i
    
    @Column(name = "months_overdue")
    private Integer monthsOverdue = 0; // S·ªë th√°ng qu√° h·∫°n
    
    @Column(name = "last_interest_calculation_date")
    private Instant lastInterestCalculationDate; // Ng√†y t√≠nh l√£i cu·ªëi c√πng

    // Kh√≥a t·∫°o URL thanh to√°n ƒë·ªÉ tr√°nh t·∫°o tr√πng trong kho·∫£ng th·ªùi gian ng·∫Øn
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss a",timezone = "GMT+7")
    @Column(name = "payment_url_locked_until")
    private Instant paymentUrlLockedUntil;

    @OneToMany(mappedBy = "bill", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonManagedReference
    private List<BillDetail> billDetails = new ArrayList<>();
    
    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ t√≠nh to√°n outstanding amount
    public void calculateOutstandingAmount() {
        if (this.totalAmount != null) {
            BigDecimal paidAmountSafe = this.paidAmount != null ? this.paidAmount : BigDecimal.ZERO;
            this.outstandingAmount = this.totalAmount.subtract(paidAmountSafe);
            this.isPartiallyPaid = this.outstandingAmount.compareTo(BigDecimal.ZERO) > 0 && paidAmountSafe.compareTo(BigDecimal.ZERO) > 0;
            
            // Debug logging
            System.out.println("üßÆ calculateOutstandingAmount:");
            System.out.println("  - totalAmount: " + this.totalAmount);
            System.out.println("  - paidAmount: " + paidAmountSafe);
            System.out.println("  - outstandingAmount: " + this.outstandingAmount);
            System.out.println("  - isPartiallyPaid: " + this.isPartiallyPaid);
        }
    }
    
    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ th√™m thanh to√°n (ch·ªâ ti·ªÅn g·ªëc)
    public void addPayment(BigDecimal paymentAmount) {
        System.out.println("üí≥ addPayment - Tr∆∞·ªõc khi c·∫≠p nh·∫≠t:");
        System.out.println("  - S·ªë ti·ªÅn thanh to√°n m·ªõi: " + paymentAmount);
        System.out.println("  - S·ªë ti·ªÅn ƒë√£ tr·∫£ hi·ªán t·∫°i: " + this.paidAmount);
        
        if (this.paidAmount == null) {
            this.paidAmount = BigDecimal.ZERO;
        }
        this.paidAmount = this.paidAmount.add(paymentAmount);
        this.lastPaymentDate = Instant.now();
        
        System.out.println("üí≥ addPayment - Sau khi c·ªông:");
        System.out.println("  - S·ªë ti·ªÅn ƒë√£ tr·∫£ m·ªõi: " + this.paidAmount);
        
        this.calculateOutstandingAmount();
        
        // KH√îNG c·∫≠p nh·∫≠t status ·ªü ƒë√¢y - ƒë·ªÉ service layer x·ª≠ l√Ω
        // Status s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong BillServiceImpl.makePartialPayment()
    }
    
    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ c·ªông ph√≠ thanh to√°n t·ª´ng ph·∫ßn
    public void addPartialPaymentFee(BigDecimal feeAmount) {
        System.out.println("üí∞ addPartialPaymentFee - Tr∆∞·ªõc khi c·∫≠p nh·∫≠t:");
        System.out.println("  - Ph√≠ thanh to√°n t·ª´ng ph·∫ßn m·ªõi: " + feeAmount);
        System.out.println("  - T·ªïng ph√≠ ƒë√£ thu hi·ªán t·∫°i: " + this.partialPaymentFeesCollected);
        
        if (this.partialPaymentFeesCollected == null) {
            this.partialPaymentFeesCollected = BigDecimal.ZERO;
        }
        this.partialPaymentFeesCollected = this.partialPaymentFeesCollected.add(feeAmount);
        
        System.out.println("üí∞ addPartialPaymentFee - Sau khi c·ªông:");
        System.out.println("  - T·ªïng ph√≠ ƒë√£ thu m·ªõi: " + this.partialPaymentFeesCollected);
    }
}
